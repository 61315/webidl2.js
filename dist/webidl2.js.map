{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/validators/helpers.js","webpack://WebIDL2/./lib/productions/type.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/productions/array-base.js","webpack://WebIDL2/./lib/productions/extended-attributes.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/argument.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/operation.js","webpack://WebIDL2/./lib/productions/attribute.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/enum.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/typedef.js","webpack://WebIDL2/./lib/productions/callback.js","webpack://WebIDL2/./lib/productions/container.js","webpack://WebIDL2/./lib/productions/constant.js","webpack://WebIDL2/./lib/productions/iterable.js","webpack://WebIDL2/./lib/productions/constructor.js","webpack://WebIDL2/./lib/productions/interface.js","webpack://WebIDL2/./lib/validators/interface.js","webpack://WebIDL2/./lib/productions/mixin.js","webpack://WebIDL2/./lib/productions/field.js","webpack://WebIDL2/./lib/productions/dictionary.js","webpack://WebIDL2/./lib/productions/namespace.js","webpack://WebIDL2/./lib/productions/callback-interface.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","kind","level","autofix","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","type","length","line","precedingLastLine","splitted","split","lastLine","subsequentTokens","subsequentText","sourceContext","repeat","contextType","context","partial","bareMessage","sourceName","input","tokens","syntaxError","validationError","token","options","index","Base","[object Object]","defineProperties","json","undefined","inheritance","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","idlTypeIncludesDictionary","idlType","defs","useNullableInner","union","def","unique","typedefIncludesDictionary","cache","has","set","result","nullable","subtype","type_suffix","tokeniser","obj","consume","probe","error","single_type","typeName","ret","base","type_Type","open","return_type","push","type_with_extended_attributes","keyType","stringTypes","keyIdlType","separator","valueType","close","generic_type","primitive_type","generic","typ","or","union_type","super","extAttrs","Boolean","helpers_unescape","prefix","postfix","filter","typedef","target","reference","targetToken","validate","default_Default","assign","const_value","expression","const_data","negative","ArrayBase","Array","extended_attributes_ExtendedAttributeParameters","secondaryName","list","rhsType","ids","parser","token_Token","listName","identifiers","argument_list","hasRhs","extended_attributes_SimpleExtendedAttribute","params","parse","rhs","arguments","arg","extended_attributes_ExtendedAttributes","extAttr","argument_Argument","start_position","optional","variadic","argumentNameKeywords","default","unconsume","tokeniser_Tokeniser","operation_Operation","special","regular","termination","includes","argument","attribute_Attribute","noInherit","readonly","identifier","startsWith","allowDangler","first","items","item","num_type","integer_type","decimal_type","voidToken","stringifier","autofixAddExposedWindow","exposed","existing","test","unshift","tokenRe","decimal","integer","string","whitespace","comment","other","nonRegexTerminals","concat","punctuations","reserved","idl","str","lastCharIndex","nextChar","charAt","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","lastIndex","WebIDLParseError","punctuation","Error","re","exec","tokenise","candidates","enum_EnumValue","enum_Enum","values","includes_Includes","mixin","typedef_Typedef","callback_CallbackFunction","container_Container","instance","inheritable","allowedMembers","colon","members","ea","mem","args","member","constant_Constant","unescape","iterable_IterableLike","async","secondTypeRequired","secondTypeAllowed","constructor_Constructor","static_member","interface_Interface","every","constructors","constructor","autofixConstructor","opNames","Set","getOperations","op","partials","mixins","mixinMap","ext","additions","forEachExtension","addition","add","existings","checkInterfaceMemberDuplication","interfaceDef","constructorExtAttr","indentation","parentTrivia","lines","getFirstIndentation","indentCh","getMemberIndentation","constructorOp","indexOf","removed","splice","trim","mixin_Mixin","field_Field","required","dictionary_Dictionary","namespace_Namespace","callback_interface_CallbackInterface","callback","parseByTokens","interface_","opts","definition","res","eof","concrete","definitions","noop","templates","wrap","nameless","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","data","make_ext_at","id","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","body","attribute","dictionary","field","const","enum","enum-value","v","iterable","maplike","setlike","callback interface","things","results","thing","dispatch","getMixinMap","all","Map","include","array","validateIterable","duplicates","WeakMap","groupDefinitions","dup","checkDuplicatedNames","flat","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @param {string} text\n */\nfunction lastLine(text) {\n  const splitted = text.split(\"\\n\");\n  return splitted[splitted.length - 1];\n}\n\n/**\n * @typedef {object} WebIDL2ErrorOptions\n * @property {\"error\" | \"warning\"} level\n * @property {Function} autofix\n *\n * @param {string} message error message\n * @param {\"Syntax\" | \"Validation\"} kind error type\n * @param {WebIDL2ErrorOptions} [options]\n */\nfunction error(source, position, current, message, kind, { level = \"error\", autofix } = {}) {\n  /**\n   * @param {number} count\n   */\n  function sliceTokens(count) {\n    return count > 0 ?\n      source.slice(position, position + count) :\n      source.slice(Math.max(position + count, 0), position);\n  }\n\n  function tokensToText(inputs, { precedes } = {}) {\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\n    const nextToken = source[position];\n    if (nextToken.type === \"eof\") {\n      return text;\n    }\n    if (precedes) {\n      return text + nextToken.trivia;\n    }\n    return text.slice(nextToken.trivia.length);\n  }\n\n  const maxTokens = 5; // arbitrary but works well enough\n  const line =\n    source[position].type !== \"eof\" ? source[position].line :\n    source.length > 1 ? source[position - 1].line :\n    1;\n\n  const precedingLastLine = lastLine(\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\n  );\n\n  const subsequentTokens = sliceTokens(maxTokens);\n  const subsequentText = tokensToText(subsequentTokens);\n  const subsequentFirstLine = subsequentText.split(\"\\n\")[0];\n\n  const spaced = \" \".repeat(precedingLastLine.length) + \"^\";\n  const sourceContext = precedingLastLine + subsequentFirstLine + \"\\n\" + spaced;\n\n  const contextType = kind === \"Syntax\" ? \"since\" : \"inside\";\n  const inSourceName = source.name ? ` in ${source.name}` : \"\";\n  const grammaticalContext = (current && current.name) ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\n  const context = `${kind} error at line ${line}${inSourceName}${grammaticalContext}:\\n${sourceContext}`;\n  return {\n    message: `${context} ${message}`,\n    bareMessage: message,\n    context,\n    line,\n    sourceName: source.name,\n    level,\n    autofix,\n    input: subsequentText,\n    tokens: subsequentTokens\n  };\n}\n\n/**\n * @param {string} message error message\n */\nexport function syntaxError(source, position, current, message) {\n  return error(source, position, current, message, \"Syntax\");\n}\n\n/**\n * @param {string} message error message\n * @param {WebIDL2ErrorOptions} [options]\n */\nexport function validationError(token, current, message, options) {\n  return error(current.source, token.index, current, message, \"Validation\", options);\n}\n","export class Base {\n  constructor({ source, tokens }) {\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n\n  toJSON() {\n    const json = { type: undefined, name: undefined, inheritance: undefined };\n    let proto = this;\n    while (proto !== Object.prototype) {\n      const descMap = Object.getOwnPropertyDescriptors(proto);\n      for (const [key, value] of Object.entries(descMap)) {\n        if (value.enumerable || value.get) {\n          json[key] = this[key];\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return json;\n  }\n}\n","/**\n * @param {*} idlType\n * @param {*[]} defs\n * @param {object} [options]\n * @param {boolean} [options.useNullableInner] use when the input idlType is nullable and you want to use its inner type\n * @return the type reference that ultimately includes dictionary.\n */\nexport function idlTypeIncludesDictionary(idlType, defs, { useNullableInner } = {}) {\n  if (!idlType.union) {\n    const def = defs.unique.get(idlType.idlType);\n    if (!def) {\n      return;\n    }\n    if (def.type === \"typedef\") {\n      const { typedefIncludesDictionary} = defs.cache;\n      if (typedefIncludesDictionary.has(def)) {\n        // Note that this also halts when it met indeterminate state\n        // to prevent infinite recursion\n        return typedefIncludesDictionary.get(def);\n      }\n      defs.cache.typedefIncludesDictionary.set(def, undefined); // indeterminate state\n      const result = idlTypeIncludesDictionary(def.idlType, defs);\n      defs.cache.typedefIncludesDictionary.set(def, result);\n      if (result) {\n        return idlType;\n      }\n    }\n    if (def.type === \"dictionary\" && (useNullableInner || !idlType.nullable)) {\n      return idlType;\n    }\n  }\n  for (const subtype of idlType.subtype) {\n    const result = idlTypeIncludesDictionary(subtype, defs);\n    if (result) {\n      if (subtype.union) {\n        return result;\n      }\n      return subtype;\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes, return_type, primitive_type } from \"./helpers.js\";\nimport { stringTypes } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction generic_type(tokeniser, typeName) {\n  const base = tokeniser.consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\n  if (!base) {\n    return;\n  }\n  const ret = new Type({ source: tokeniser.source, tokens: { base } });\n  ret.tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`No opening bracket after ${base.type}`);\n  switch (base.type) {\n    case \"Promise\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Promise type cannot have extended attribute\");\n      const subtype = return_type(tokeniser, typeName) || tokeniser.error(\"Missing Promise subtype\");\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"sequence\":\n    case \"FrozenArray\": {\n      const subtype = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(`Missing ${base.type} subtype`);\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"record\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Record key cannot have extended attribute\");\n      const keyType = tokeniser.consume(...stringTypes) || tokeniser.error(`Record key must be one of: ${stringTypes.join(\", \")}`);\n      const keyIdlType = new Type({ source: tokeniser.source, tokens: { base: keyType }});\n      keyIdlType.tokens.separator = tokeniser.consume(\",\") || tokeniser.error(\"Missing comma after record key type\");\n      keyIdlType.type = typeName;\n      const valueType = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(\"Error parsing generic type record\");\n      ret.subtype.push(keyIdlType, valueType);\n      break;\n    }\n  }\n  if (!ret.idlType) tokeniser.error(`Error parsing generic type ${base.type}`);\n  ret.tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing closing bracket after ${base.type}`);\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction type_suffix(tokeniser, obj) {\n  const nullable = tokeniser.consume(\"?\");\n  if (nullable) {\n    obj.tokens.nullable = nullable;\n  }\n  if (tokeniser.probe(\"?\")) tokeniser.error(\"Can't nullable more than once\");\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction single_type(tokeniser, typeName) {\n  let ret = generic_type(tokeniser, typeName) || primitive_type(tokeniser);\n  if (!ret) {\n    const base = tokeniser.consume(\"identifier\", ...stringTypes);\n    if (!base) {\n      return;\n    }\n    ret = new Type({ source: tokeniser.source, tokens: { base } });\n    if (tokeniser.probe(\"<\")) tokeniser.error(`Unsupported generic type ${base.value}`);\n  }\n  if (ret.generic === \"Promise\" && tokeniser.probe(\"?\")) {\n    tokeniser.error(\"Promise type cannot be nullable\");\n  }\n  ret.type = typeName || null;\n  type_suffix(tokeniser, ret);\n  if (ret.nullable && ret.idlType === \"any\") tokeniser.error(\"Type `any` cannot be made nullable\");\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} type\n */\nfunction union_type(tokeniser, type) {\n  const tokens = {};\n  tokens.open = tokeniser.consume(\"(\");\n  if (!tokens.open) return;\n  const ret = new Type({ source: tokeniser.source, tokens });\n  ret.type = type || null;\n  while (true) {\n    const typ = type_with_extended_attributes(tokeniser) || tokeniser.error(\"No type after open parenthesis or 'or' in union type\");\n    if (typ.idlType === \"any\") tokeniser.error(\"Type `any` cannot be included in a union type\");\n    ret.subtype.push(typ);\n    const or = tokeniser.consume(\"or\");\n    if (or) {\n      typ.tokens.separator = or;\n    }\n    else break;\n  }\n  if (ret.idlType.length < 2) {\n    tokeniser.error(\"At least two types are expected in a union type but found less\");\n  }\n  tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated union type\");\n  type_suffix(tokeniser, ret);\n  return ret;\n}\n\nexport class Type extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} typeName\n   */\n  static parse(tokeniser, typeName) {\n    return single_type(tokeniser, typeName) || union_type(tokeniser, typeName);\n  }\n\n  constructor({ source, tokens }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"subtype\", { value: [] });\n    this.extAttrs = [];\n  }\n\n  get generic() {\n    if (this.subtype.length && this.tokens.base) {\n      return this.tokens.base.value;\n    }\n    return \"\";\n  }\n  get nullable() {\n    return Boolean(this.tokens.nullable);\n  }\n  get union() {\n    return Boolean(this.subtype.length) && !this.tokens.base;\n  }\n  get idlType() {\n    if (this.subtype.length) {\n      return this.subtype;\n    }\n    // Adding prefixes/postfixes for \"unrestricted float\", etc.\n    const name = [\n      this.tokens.prefix,\n      this.tokens.base,\n      this.tokens.postfix\n    ].filter(t => t).map(t => t.value).join(\" \");\n    return unescape(name);\n  }\n\n  *validate(defs) {\n    /*\n     * If a union is nullable, its subunions cannot include a dictionary\n     * If not, subunions may include dictionaries if each union is not nullable\n     */\n    const typedef = !this.union && defs.unique.get(this.idlType);\n    const target =\n      this.union ? this :\n      (typedef && typedef.type === \"typedef\") ? typedef.idlType :\n      undefined;\n    if (target && this.nullable) {\n      // do not allow any dictionary\n      const reference = idlTypeIncludesDictionary(target, defs);\n      if (reference) {\n        const targetToken = (this.union ? reference : this).tokens.base;\n        const message = `Nullable union cannot include a dictionary type`;\n        yield validationError(targetToken, this, message);\n      }\n    } else {\n      // allow some dictionary\n      for (const subtype of this.subtype) {\n        yield* subtype.validate(defs);\n      }\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { const_data, const_value } from \"./helpers.js\";\n\nexport class Default extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const assign = tokeniser.consume(\"=\");\n    if (!assign) {\n      return null;\n    }\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\", \"{\") || tokeniser.error(\"No value for default\");\n    const expression = [def];\n    if (def.type === \"[\") {\n      const close = tokeniser.consume(\"]\") || tokeniser.error(\"Default sequence value must be empty\");\n      expression.push(close);\n    } else if (def.type === \"{\") {\n      const close = tokeniser.consume(\"}\") || tokeniser.error(\"Default dictionary value must be empty\");\n      expression.push(close);\n    }\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\n  }\n\n  constructor({ source, tokens, expression }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"expression\", { value: expression });\n  }\n\n  get type() {\n    return const_data(this.expression[0]).type;\n  }\n  get value() {\n    return const_data(this.expression[0]).value;\n  }\n  get negative() {\n    return const_data(this.expression[0]).negative;\n  }\n}\n","export class ArrayBase extends Array {\n  constructor({ source, tokens }) {\n    super();\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ArrayBase } from \"./array-base.js\";\nimport { list, identifiers, argument_list } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\n\nclass ExtendedAttributeParameters extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = { assign: tokeniser.consume(\"=\") };\n    const ret = new ExtendedAttributeParameters({ source: tokeniser.source, tokens });\n    if (tokens.assign) {\n      tokens.secondaryName = tokeniser.consume(\"identifier\", \"decimal\", \"integer\", \"string\");\n    }\n    tokens.open = tokeniser.consume(\"(\");\n    if (tokens.open) {\n      ret.list = ret.rhsType === \"identifier-list\" ?\n        // [Exposed=(Window,Worker)]\n        identifiers(tokeniser) :\n        // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\n        argument_list(tokeniser);\n      tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unexpected token in extended attribute argument list\");\n    } else if (ret.hasRhs && !tokens.secondaryName) {\n      tokeniser.error(\"No right hand side to extended attribute assignment\");\n    }\n    return ret;\n  }\n\n  get rhsType() {\n    return !this.tokens.assign ? null :\n      !this.tokens.secondaryName ? \"identifier-list\" :\n        this.tokens.secondaryName.type;\n  }\n}\n\nexport class SimpleExtendedAttribute extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const name = tokeniser.consume(\"identifier\");\n    if (name) {\n      return new SimpleExtendedAttribute({\n        source: tokeniser.source,\n        tokens: { name },\n        params: ExtendedAttributeParameters.parse(tokeniser)\n      });\n    }\n  }\n\n  constructor({ source, tokens, params }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"params\", { value: params });\n  }\n\n  get type() {\n    return \"extended-attribute\";\n  }\n  get name() {\n    return this.tokens.name.value;\n  }\n  get rhs() {\n    const { rhsType: type, tokens, list } = this.params;\n    if (!type) {\n      return null;\n    }\n    const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\n    return { type, value };\n  }\n  get arguments() {\n    const { rhsType, list } = this.params;\n    if (!list || rhsType === \"identifier-list\") {\n      return [];\n    }\n    return list;\n  }\n\n  *validate(defs) {\n    if (this.name === \"NoInterfaceObject\") {\n      const message = `\\`[NoInterfaceObject]\\` extended attribute is an \\\nundesirable feature that may be removed from Web IDL in the future. Refer to the \\\n[relevant upstream PR](https://github.com/heycam/webidl/pull/609) for more \\\ninformation.`;\n      yield validationError(this.tokens.name, this, message, { level: \"warning\" });\n    }\n    for (const arg of this.arguments) {\n      yield* arg.validate(defs);\n    }\n  }\n}\n\n// Note: we parse something simpler than the official syntax. It's all that ever\n// seems to be used\nexport class ExtendedAttributes extends ArrayBase {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.open = tokeniser.consume(\"[\");\n    if (!tokens.open) return new ExtendedAttributes({});\n    const ret = new ExtendedAttributes({ source: tokeniser.source, tokens });\n    ret.push(...list(tokeniser, {\n      parser: SimpleExtendedAttribute.parse,\n      listName: \"extended attribute\"\n    }));\n    tokens.close = tokeniser.consume(\"]\") || tokeniser.error(\"Unexpected closing token of extended attribute\");\n    if (!ret.length) {\n      tokeniser.error(\"Found an empty extended attribute\");\n    }\n    if (tokeniser.probe(\"[\")) {\n      tokeniser.error(\"Illegal double extended attribute lists, consider merging them\");\n    }\n    return ret;\n  }\n\n  *validate(defs) {\n    for (const extAttr of this) {\n      yield* extAttr.validate(defs);\n    }\n  }\n}\n","import { Type } from \"./type.js\";\nimport { Argument } from \"./argument.js\";\nimport { Token } from \"./token.js\";\nimport { ExtendedAttributes, SimpleExtendedAttribute } from \"./extended-attributes.js\";\nimport { Operation } from \"./operation.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Tokeniser } from \"../tokeniser.js\";\n\n/**\n * @param {string} identifier\n */\nexport function unescape(identifier) {\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\n}\n\n/**\n * Parses comma-separated list\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {object} args\n * @param {Function} args.parser parser function for each item\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\n * @param {string} [args.listName] the name to be shown on error messages\n */\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\n  const first = parser(tokeniser);\n  if (!first) {\n    return [];\n  }\n  first.tokens.separator = tokeniser.consume(\",\");\n  const items = [first];\n  while (first.tokens.separator) {\n    const item = parser(tokeniser);\n    if (!item) {\n      if (!allowDangler) {\n        tokeniser.error(`Trailing comma in ${listName}`);\n      }\n      break;\n    }\n    item.tokens.separator = tokeniser.consume(\",\");\n    items.push(item);\n    if (!item.tokens.separator) break;\n  }\n  return items;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function const_value(tokeniser) {\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\n}\n\n/**\n * @param {object} token\n * @param {string} token.type\n * @param {string} token.value\n */\nexport function const_data({ type, value }) {\n  switch (type) {\n    case \"true\":\n    case \"false\":\n      return { type: \"boolean\", value: type === \"true\" };\n    case \"Infinity\":\n    case \"-Infinity\":\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\n    case \"[\":\n      return { type: \"sequence\", value: [] };\n    case \"{\":\n      return { type: \"dictionary\" };\n    case \"decimal\":\n    case \"integer\":\n      return { type: \"number\", value };\n    case \"string\":\n      return { type: \"string\", value: value.slice(1, -1) };\n    default:\n      return { type };\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function primitive_type(tokeniser) {\n  function integer_type() {\n    const prefix = tokeniser.consume(\"unsigned\");\n    const base = tokeniser.consume(\"short\", \"long\");\n    if (base) {\n      const postfix = tokeniser.consume(\"long\");\n      return new Type({ source, tokens: { prefix, base, postfix } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse integer type\");\n  }\n\n  function decimal_type() {\n    const prefix = tokeniser.consume(\"unrestricted\");\n    const base = tokeniser.consume(\"float\", \"double\");\n    if (base) {\n      return new Type({ source, tokens: { prefix, base } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse float type\");\n  }\n\n  const { source } = tokeniser;\n  const num_type = integer_type(tokeniser) || decimal_type(tokeniser);\n  if (num_type) return num_type;\n  const base = tokeniser.consume(\"boolean\", \"byte\", \"octet\");\n  if (base) {\n    return new Type({ source, tokens: { base } });\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function identifiers(tokeniser) {\n  const ids = list(tokeniser, { parser: Token.parser(tokeniser, \"identifier\"), listName: \"identifier list\" });\n  if (!ids.length) {\n    tokeniser.error(\"Expected identifiers but none found\");\n  }\n  return ids;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function argument_list(tokeniser) {\n  return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function type_with_extended_attributes(tokeniser, typeName) {\n  const extAttrs = ExtendedAttributes.parse(tokeniser);\n  const ret = Type.parse(tokeniser, typeName);\n  if (ret) ret.extAttrs = extAttrs;\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function return_type(tokeniser, typeName) {\n  const typ = Type.parse(tokeniser, typeName || \"return-type\");\n  if (typ) {\n    return typ;\n  }\n  const voidToken = tokeniser.consume(\"void\");\n  if (voidToken) {\n    const ret = new Type({ source: tokeniser.source, tokens: { base: voidToken } });\n    ret.type = \"return-type\";\n    return ret;\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function stringifier(tokeniser) {\n  const special = tokeniser.consume(\"stringifier\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"Unterminated stringifier\");\n  return member;\n}\n\n/**\n * @param {string} str\n */\nfunction getFirstIndentation(str) {\n  const lines = str.split(\"\\n\");\n  for (const line of lines) {\n    const match = line.match(/^\\s+/);\n    if (match) {\n      return match[0];\n    }\n  }\n  return \"\";\n}\n\n/**\n * @param {string} parentTrivia\n */\nexport function getMemberIndentation(parentTrivia) {\n  const indentation = getFirstIndentation(parentTrivia);\n  const indentCh = indentation.includes(\"\\t\") ? \"\\t\" : \"  \";\n  return indentation + indentCh;\n}\n\n/**\n * @param {object} def\n * @param {import(\"./extended-attributes.js\").ExtendedAttributes} def.extAttrs\n */\nexport function autofixAddExposedWindow(def) {\n  return () => {\n    if (def.extAttrs.length){\n      const tokeniser = new Tokeniser(\"Exposed=Window,\");\n      const exposed = SimpleExtendedAttribute.parse(tokeniser);\n      exposed.tokens.separator = tokeniser.consume(\",\");\n      const existing = def.extAttrs[0];\n      if (!/^\\s/.test(existing.tokens.name.trivia)) {\n        existing.tokens.name.trivia = ` ${existing.tokens.name.trivia}`;\n      }\n      def.extAttrs.unshift(exposed);\n    } else {\n      def.extAttrs = ExtendedAttributes.parse(new Tokeniser(\"[Exposed=Window]\"));\n      def.extAttrs.tokens.open.trivia = def.tokens.base.trivia;\n      def.tokens.base.trivia = \" \";\n    }\n  };\n}\n","import { Base } from \"./base.js\";\nimport { Default } from \"./default.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { argumentNameKeywords, Tokeniser } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\nexport class Argument extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new Argument({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.optional = tokeniser.consume(\"optional\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"argument-type\");\n    if (!ret.idlType) {\n      return tokeniser.unconsume(start_position);\n    }\n    if (!tokens.optional) {\n      tokens.variadic = tokeniser.consume(\"...\");\n    }\n    tokens.name = tokeniser.consume(\"identifier\", ...argumentNameKeywords);\n    if (!tokens.name) {\n      return tokeniser.unconsume(start_position);\n    }\n    ret.default = tokens.optional ? Default.parse(tokeniser) : null;\n    return ret;\n  }\n\n  get type() {\n    return \"argument\";\n  }\n  get optional() {\n    return !!this.tokens.optional;\n  }\n  get variadic() {\n    return !!this.tokens.variadic;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n    if (idlTypeIncludesDictionary(this.idlType, defs, { useNullableInner: true })) {\n      if (this.idlType.nullable) {\n        const message = `Dictionary arguments cannot be nullable.`;\n        yield validationError(this.tokens.name, this, message);\n      } else if (this.optional && !this.default) {\n        const message = `Optional dictionary arguments must have a default value of \\`{}\\`.`;\n        yield validationError(this.tokens.name, this, message, {\n          autofix: autofixOptionalDictionaryDefaultValue(this)\n        });\n      }\n    }\n  }\n}\n\n/**\n * @param {Argument} arg\n */\nfunction autofixOptionalDictionaryDefaultValue(arg) {\n  return () => {\n    arg.default = Default.parse(new Tokeniser(\" = {}\"));\n  };\n}\n","import { Base } from \"./base.js\";\n\nexport class Token extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} type\n   */\n  static parser(tokeniser, type) {\n    return () => {\n      const value = tokeniser.consume(type);\n      if (value) {\n        return new Token({ source: tokeniser.source, tokens: { value } });\n      }\n    };\n  }\n\n  get value() {\n    return this.tokens.value.value;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\n\nexport class Operation extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, regular } = {}) {\n    const tokens = { special };\n    const ret = new Operation({ source: tokeniser.source, tokens });\n    if (special && special.value === \"stringifier\") {\n      tokens.termination = tokeniser.consume(\";\");\n      if (tokens.termination) {\n        ret.arguments = [];\n        return ret;\n      }\n    }\n    if (!special && !regular) {\n      tokens.special = tokeniser.consume(\"getter\", \"setter\", \"deleter\");\n    }\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Missing return type\");\n    tokens.name = tokeniser.consume(\"identifier\", \"includes\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Invalid operation\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated operation\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated operation, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"operation\";\n  }\n  get name() {\n    const { name } = this.tokens;\n    if (!name) {\n      return \"\";\n    }\n    return unescape(name.value);\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n\n  *validate(defs) {\n    if (!this.name && [\"\", \"static\"].includes(this.special)) {\n      const message = `Regular or static operations must have both a return type and an identifier.`;\n      yield validationError(this.tokens.open, this, message);\n    }\n    if (this.idlType) {\n      yield* this.idlType.validate(defs);\n    }\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Attribute extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, noInherit = false, readonly = false } = {}) {\n    const start_position = tokeniser.position;\n    const tokens = { special };\n    const ret = new Attribute({ source: tokeniser.source, tokens });\n    if (!special && !noInherit) {\n      tokens.special = tokeniser.consume(\"inherit\");\n    }\n    if (ret.special === \"inherit\" && tokeniser.probe(\"readonly\")) {\n      tokeniser.error(\"Inherited attributes cannot be read-only\");\n    }\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (readonly && !tokens.readonly && tokeniser.probe(\"attribute\")) {\n      tokeniser.error(\"Attributes must be readonly in this context\");\n    }\n    tokens.base = tokeniser.consume(\"attribute\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"attribute-type\") || tokeniser.error(\"Attribute lacks a type\");\n    switch (ret.idlType.generic) {\n      case \"sequence\":\n      case \"record\": tokeniser.error(`Attributes cannot accept ${ret.idlType.generic} types`);\n    }\n    tokens.name = tokeniser.consume(\"identifier\", \"async\", \"required\") || tokeniser.error(\"Attribute lacks a name\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated attribute, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"attribute\";\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { syntaxError } from \"./error.js\";\nimport { unescape } from \"./productions/helpers.js\";\n\n// These regular expressions use the sticky flag so they will only match at\n// the current location (ie. the offset of lastIndex).\nconst tokenRe = {\n  // This expression uses a lookahead assertion to catch false matches\n  // against integers early.\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\n  \"string\": /\"[^\"]*\"/y,\n  \"whitespace\": /[\\t\\n\\r ]+/y,\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\n};\n\nexport const stringTypes = [\n  \"ByteString\",\n  \"DOMString\",\n  \"USVString\"\n];\n\nexport const argumentNameKeywords = [\n  \"async\",\n  \"attribute\",\n  \"callback\",\n  \"const\",\n  \"constructor\",\n  \"deleter\",\n  \"dictionary\",\n  \"enum\",\n  \"getter\",\n  \"includes\",\n  \"inherit\",\n  \"interface\",\n  \"iterable\",\n  \"maplike\",\n  \"namespace\",\n  \"partial\",\n  \"required\",\n  \"setlike\",\n  \"setter\",\n  \"static\",\n  \"stringifier\",\n  \"typedef\",\n  \"unrestricted\"\n];\n\nconst nonRegexTerminals = [\n  \"-Infinity\",\n  \"FrozenArray\",\n  \"Infinity\",\n  \"NaN\",\n  \"Promise\",\n  \"async\",\n  \"boolean\",\n  \"byte\",\n  \"constructor\",\n  \"double\",\n  \"false\",\n  \"float\",\n  \"long\",\n  \"mixin\",\n  \"null\",\n  \"octet\",\n  \"optional\",\n  \"or\",\n  \"readonly\",\n  \"record\",\n  \"sequence\",\n  \"short\",\n  \"true\",\n  \"unsigned\",\n  \"void\"\n].concat(argumentNameKeywords, stringTypes);\n\nconst punctuations = [\n  \"(\",\n  \")\",\n  \",\",\n  \"...\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\"\n];\n\nconst reserved = [\n  // \"constructor\" is now a keyword\n  \"_constructor\",\n  \"toString\",\n  \"_toString\",\n];\n\n/**\n * @param {string} str\n */\nfunction tokenise(str) {\n  const tokens = [];\n  let lastCharIndex = 0;\n  let trivia = \"\";\n  let line = 1;\n  let index = 0;\n  while (lastCharIndex < str.length) {\n    const nextChar = str.charAt(lastCharIndex);\n    let result = -1;\n\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\n    } else if (nextChar === '/') {\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\n    }\n\n    if (result !== -1) {\n      const currentTrivia = tokens.pop().value;\n      line += (currentTrivia.match(/\\n/g) || []).length;\n      trivia += currentTrivia;\n      index -= 1;\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\n      result = attemptTokenMatch(\"decimal\");\n      if (result === -1) {\n        result = attemptTokenMatch(\"integer\");\n      }\n      if (result === -1) {\n        result = attemptTokenMatch(\"identifier\");\n        const lastIndex = tokens.length - 1;\n        const token = tokens[lastIndex];\n        if (result !== -1) {\n          if (reserved.includes(token.value)) {\n            const message = `${unescape(token.value)} is a reserved identifier and must not be used.`;\n            throw new WebIDLParseError(syntaxError(tokens, lastIndex, null, message));\n          } else if (nonRegexTerminals.includes(token.value)) {\n            token.type = token.value;\n          }\n        }\n      }\n    } else if (nextChar === '\"') {\n      result = attemptTokenMatch(\"string\");\n    }\n\n    for (const punctuation of punctuations) {\n      if (str.startsWith(punctuation, lastCharIndex)) {\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\n        trivia = \"\";\n        lastCharIndex += punctuation.length;\n        result = lastCharIndex;\n        break;\n      }\n    }\n\n    // other as the last try\n    if (result === -1) {\n      result = attemptTokenMatch(\"other\");\n    }\n    if (result === -1) {\n      throw new Error(\"Token stream not progressing\");\n    }\n    lastCharIndex = result;\n    index += 1;\n  }\n\n  // remaining trivia as eof\n  tokens.push({\n    type: \"eof\",\n    value: \"\",\n    trivia\n  });\n\n  return tokens;\n\n  /**\n   * @param {keyof tokenRe} type\n   * @param {object} [options]\n   * @param {boolean} [options.noFlushTrivia]\n   */\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\n    const re = tokenRe[type];\n    re.lastIndex = lastCharIndex;\n    const result = re.exec(str);\n    if (result) {\n      tokens.push({ type, value: result[0], trivia, line, index });\n      if (!noFlushTrivia) {\n        trivia = \"\";\n      }\n      return re.lastIndex;\n    }\n    return -1;\n  }\n}\n\nexport class Tokeniser {\n  /**\n   * @param {string} idl\n   */\n  constructor(idl) {\n    this.source = tokenise(idl);\n    this.position = 0;\n  }\n\n  /**\n   * @param {string} message\n   */\n  error(message) {\n    throw new WebIDLParseError(syntaxError(this.source, this.position, this.current, message));\n  }\n\n  /**\n   * @param {string} type\n   */\n  probe(type) {\n    return this.source.length > this.position && this.source[this.position].type === type;\n  }\n\n  /**\n   * @param  {...string} candidates\n   */\n  consume(...candidates) {\n    for (const type of candidates) {\n      if (!this.probe(type)) continue;\n      const token = this.source[this.position];\n      this.position++;\n      return token;\n    }\n  }\n\n  /**\n   * @param {number} position\n   */\n  unconsume(position) {\n    this.position = position;\n  }\n}\n\nclass WebIDLParseError extends Error {\n  constructor({ message, bareMessage, context, line, sourceName, input, tokens }) {\n    super(message);\n\n    this.name = \"WebIDLParseError\"; // not to be mangled\n    this.bareMessage = bareMessage;\n    this.context = context;\n    this.line = line;\n    this.sourceName = sourceName;\n    this.input = input;\n    this.tokens = tokens;\n  }\n}\n","import { list, unescape } from \"./helpers.js\";\nimport { Token } from \"./token.js\";\nimport { Base } from \"./base.js\";\n\nclass EnumValue extends Token {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const value = tokeniser.consume(\"string\");\n    if (value) {\n      return new EnumValue({ source: tokeniser.source, tokens: { value } });\n    }\n  }\n\n  get type() {\n    return \"enum-value\";\n  }\n  get value() {\n    return super.value.slice(1, -1);\n  }\n}\n\nexport class Enum extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"enum\");\n    if (!tokens.base) {\n      return;\n    }\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"No name for enum\");\n    const ret = tokeniser.current = new Enum({ source: tokeniser.source, tokens });\n    tokens.open = tokeniser.consume(\"{\") || tokeniser.error(\"Bodyless enum\");\n    ret.values = list(tokeniser, {\n      parser: EnumValue.parse,\n      allowDangler: true,\n      listName: \"enumeration\"\n    });\n    if (tokeniser.probe(\"string\")) {\n      tokeniser.error(\"No comma between enum values\");\n    }\n    tokens.close = tokeniser.consume(\"}\") || tokeniser.error(\"Unexpected value in enum\");\n    if (!ret.values.length) {\n      tokeniser.error(\"No value in enum\");\n    }\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after enum\");\n    return ret;\n  }\n\n  get type() {\n    return \"enum\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape } from \"./helpers.js\";\n\nexport class Includes extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const target = tokeniser.consume(\"identifier\");\n    if (!target) {\n      return;\n    }\n    const tokens = { target };\n    tokens.includes = tokeniser.consume(\"includes\");\n    if (!tokens.includes) {\n      tokeniser.unconsume(target.index);\n      return;\n    }\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\n    return new Includes({ source: tokeniser.source, tokens });\n  }\n\n  get type() {\n    return \"includes\";\n  }\n  get target() {\n    return unescape(this.tokens.target.value);\n  }\n  get includes() {\n    return unescape(this.tokens.mixin.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Typedef extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Typedef({ source: tokeniser.source, tokens });\n    tokens.base = tokeniser.consume(\"typedef\");\n    if (!tokens.base) {\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"typedef-type\") || tokeniser.error(\"Typedef lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Typedef lacks a name\");\n    tokeniser.current = ret;\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated typedef, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"typedef\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class CallbackFunction extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base) {\n    const tokens = { base };\n    const ret = new CallbackFunction({ source: tokeniser.source, tokens });\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Callback lacks a name\");\n    tokeniser.current = ret;\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Callback lacks an assignment\");\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Callback lacks a return type\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Callback lacks parentheses for arguments\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated callback\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated callback, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"callback\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape } from \"./helpers.js\";\n\n/**\n * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n */\nfunction inheritance(tokeniser) {\n  const colon = tokeniser.consume(\":\");\n  if (!colon) {\n    return {};\n  }\n  const inheritance = tokeniser.consume(\"identifier\") || tokeniser.error(\"Inheritance lacks a type\");\n  return { colon, inheritance };\n}\n\nexport class Container extends Base {\n    /**\n     * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n     * @param {*} instance\n     * @param {*} args\n     */\n    static parse(tokeniser, instance, { type, inheritable, allowedMembers }) {\n      const { tokens } = instance;\n      tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(`Missing name in ${instance.type}`);\n      tokeniser.current = instance;\n      if (inheritable) {\n        Object.assign(tokens, inheritance(tokeniser));\n      }\n      tokens.open = tokeniser.consume(\"{\") || tokeniser.error(`Bodyless ${type}`);\n      instance.members = [];\n      while (true) {\n        tokens.close = tokeniser.consume(\"}\");\n        if (tokens.close) {\n          tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type}`);\n          return instance;\n        }\n        const ea = ExtendedAttributes.parse(tokeniser);\n        let mem;\n        for (const [parser, ...args] of allowedMembers) {\n          mem = parser(tokeniser, ...args);\n          if (mem) {\n            break;\n          }\n        }\n        if (!mem) {\n          tokeniser.error(\"Unknown member\");\n        }\n        mem.extAttrs = ea;\n        instance.members.push(mem);\n      }\n    }\n\n    get partial() {\n      return !!this.tokens.partial;\n    }\n    get name() {\n      return unescape(this.tokens.name.value);\n    }\n    get inheritance() {\n      if (!this.tokens.inheritance) {\n        return null;\n      }\n      return unescape(this.tokens.inheritance.value);\n    }\n\n    *validate(defs) {\n      for (const member of this.members) {\n        if (member.validate) {\n          yield* member.validate(defs);\n        }\n      }\n    }\n  }\n","import { Base } from \"./base.js\";\nimport { Type } from \"./type.js\";\nimport { const_data, const_value, primitive_type } from \"./helpers.js\";\n\nexport class Constant extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"const\");\n    if (!tokens.base) {\n      return;\n    }\n    let idlType = primitive_type(tokeniser);\n    if (!idlType) {\n      const base = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a type\");\n      idlType = new Type({ source: tokeniser.source, tokens: { base } });\n    }\n    if (tokeniser.probe(\"?\")) {\n      tokeniser.error(\"Unexpected nullable constant type\");\n    }\n    idlType.type = \"const-type\";\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a name\");\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Const lacks value assignment\");\n    tokens.value = const_value(tokeniser) || tokeniser.error(\"Const lacks a value\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated const, expected `;`\");\n    const ret = new Constant({ source: tokeniser.source, tokens });\n    ret.idlType = idlType;\n    return ret;\n  }\n\n  get type() {\n    return \"const\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get value() {\n    return const_data(this.tokens.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes } from \"./helpers.js\";\n\nexport class IterableLike extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new IterableLike({ source: tokeniser.source, tokens });\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (!tokens.readonly) {\n      tokens.async = tokeniser.consume(\"async\");\n    }\n    tokens.base =\n      tokens.readonly ? tokeniser.consume(\"maplike\", \"setlike\") :\n      tokens.async ? tokeniser.consume(\"iterable\") :\n      tokeniser.consume(\"iterable\", \"maplike\", \"setlike\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n\n    const { type } = ret;\n    const secondTypeRequired = type === \"maplike\" || ret.async;\n    const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\n\n    tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`Missing less-than sign \\`<\\` in ${type} declaration`);\n    const first = type_with_extended_attributes(tokeniser) || tokeniser.error(`Missing a type argument in ${type} declaration`);\n    ret.idlType = [first];\n    if (secondTypeAllowed) {\n      first.tokens.separator = tokeniser.consume(\",\");\n      if (first.tokens.separator) {\n        ret.idlType.push(type_with_extended_attributes(tokeniser));\n      }\n      else if (secondTypeRequired) {\n        tokeniser.error(`Missing second type argument in ${type} declaration`);\n      }\n    }\n    tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing greater-than sign \\`>\\` in ${type} declaration`);\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type} declaration`);\n\n    return ret;\n  }\n\n  get type() {\n    return this.tokens.base.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get async() {\n    return !!this.tokens.async;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { argument_list } from \"./helpers.js\";\n\nexport class Constructor extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const base = tokeniser.consume(\"constructor\");\n    if (!base) {\n      return;\n    }\n    const tokens = { base };\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"No argument list in constructor\");\n    const args = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated constructor\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after constructor\");\n    const ret = new Constructor({ tokens });\n    ret.arguments = args;\n    return ret;\n  }\n\n  get type() {\n    return \"constructor\";\n  }\n\n  *validate(defs) {\n    if (this.idlType) {\n      yield* this.idlType.validate(defs);\n    }\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\nimport { IterableLike } from \"./iterable.js\";\nimport { stringifier, autofixAddExposedWindow, getMemberIndentation } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\nimport { checkInterfaceMemberDuplication } from \"../validators/interface.js\";\nimport { Constructor } from \"./constructor.js\";\nimport { Tokeniser } from \"../tokeniser.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction static_member(tokeniser) {\n  const special = tokeniser.consume(\"static\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"No body in static member\");\n  return member;\n}\n\nexport class Interface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial = null } = {}) {\n    const tokens = { partial, base };\n    return Container.parse(tokeniser, new Interface({ source: tokeniser.source, tokens }), {\n      type: \"interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Constructor.parse],\n        [static_member],\n        [stringifier],\n        [IterableLike.parse],\n        [Attribute.parse],\n        [Operation.parse]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface\";\n  }\n\n  *validate(defs) {\n    yield* this.extAttrs.validate(defs);\n    if (\n      !this.partial &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\") &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"NoInterfaceObject\")\n    ) {\n      const message = `Interfaces must have \\`[Exposed]\\` extended attribute. \\\nTo fix, add, for example, \\`[Exposed=Window]\\`. Please also consider carefully \\\nif your interface should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.tokens.name, this, message, {\n        autofix: autofixAddExposedWindow(this)\n      });\n    }\n    const constructors = this.extAttrs.filter(extAttr => extAttr.name === \"Constructor\");\n    for (const constructor of constructors) {\n      const message = `Constructors should now be represented as a \\`constructor()\\` operation on the interface \\\ninstead of \\`[Constructor]\\` extended attribute. Refer to the \\\n[WebIDL spec section on constructor operations](https://heycam.github.io/webidl/#idl-constructors) \\\nfor more information.`;\n      yield validationError(constructor.tokens.name, this, message, {\n        autofix: autofixConstructor(this, constructor)\n      });\n    }\n\n    yield* super.validate(defs);\n    if (!this.partial) {\n      yield* checkInterfaceMemberDuplication(defs, this);\n    }\n  }\n}\n\nfunction autofixConstructor(interfaceDef, constructorExtAttr) {\n  return () => {\n    const indentation = getMemberIndentation(interfaceDef.tokens.close.trivia);\n    const constructorOp = Constructor.parse(new Tokeniser(`\\n${indentation}constructor();`));\n    constructorOp.extAttrs = [];\n    constructorOp.arguments = constructorExtAttr.arguments;\n    interfaceDef.members.unshift(constructorOp);\n    const { extAttrs } = interfaceDef;\n    const index = extAttrs.indexOf(constructorExtAttr);\n    const removed = extAttrs.splice(index, 1);\n    if (!extAttrs.length) {\n      extAttrs.tokens.open = extAttrs.tokens.close = undefined;\n    } else if (extAttrs.length === index) {\n      extAttrs[index - 1].tokens.separator = undefined;\n    } else if (!extAttrs[index].tokens.name.trivia.trim()) {\n      extAttrs[index].tokens.name.trivia = removed[0].tokens.name.trivia;\n    }\n  };\n}\n","import { validationError } from \"../error.js\";\n\nexport function* checkInterfaceMemberDuplication(defs, i) {\n  const opNames = new Set(getOperations(i).map(op => op.name));\n  const partials = defs.partials.get(i.name) || [];\n  const mixins = defs.mixinMap.get(i.name) || [];\n  for (const ext of [...partials, ...mixins]) {\n    const additions = getOperations(ext);\n    yield* forEachExtension(additions, opNames, ext, i);\n    for (const addition of additions) {\n      opNames.add(addition.name);\n    }\n  }\n\n  function* forEachExtension(additions, existings, ext, base) {\n    for (const addition of additions) {\n      const { name } = addition;\n      if (name && existings.has(name)) {\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\n        yield validationError(addition.tokens.name, ext, message);\n      }\n    }\n  }\n\n  function getOperations(i) {\n    return i.members\n      .filter(({type}) => type === \"operation\");\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Constant } from \"./constant.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { stringifier } from \"./helpers.js\";\n\nexport class Mixin extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial } = {}) {\n    const tokens = { partial, base };\n    tokens.mixin = tokeniser.consume(\"mixin\");\n    if (!tokens.mixin) {\n      return;\n    }\n    return Container.parse(tokeniser, new Mixin({ source: tokeniser.source, tokens }), {\n      type: \"interface mixin\",\n      allowedMembers: [\n        [Constant.parse],\n        [stringifier],\n        [Attribute.parse, { noInherit: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface mixin\";\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Default } from \"./default.js\";\n\nexport class Field extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Field({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.required = tokeniser.consume(\"required\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"dictionary-type\") || tokeniser.error(\"Dictionary member lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Dictionary member lacks a name\");\n    ret.default = Default.parse(tokeniser);\n    if (tokens.required && ret.default) tokeniser.error(\"Required member must not have a default\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated dictionary member, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"field\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get required() {\n    return !!this.tokens.required;\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Field } from \"./field.js\";\n\nexport class Dictionary extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"dictionary\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Dictionary({ source: tokeniser.source, tokens }), {\n      type: \"dictionary\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Field.parse],\n      ]\n    });\n  }\n\n  get type() {\n    return \"dictionary\";\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { validationError } from \"../error.js\";\nimport { autofixAddExposedWindow } from \"./helpers.js\";\n\nexport class Namespace extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"namespace\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Namespace({ source: tokeniser.source, tokens }), {\n      type: \"namespace\",\n      allowedMembers: [\n        [Attribute.parse, { noInherit: true, readonly: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"namespace\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Namespaces must have [Exposed] extended attribute. \\\nTo fix, add, for example, [Exposed=Window]. Please also consider carefully \\\nif your namespace should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.tokens.name, this, message, {\n        autofix: autofixAddExposedWindow(this)\n      });\n    }\n    yield* super.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\n\n\nexport class CallbackInterface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, callback, { partial = null } = {}) {\n    const tokens = { callback };\n    tokens.base = tokeniser.consume(\"interface\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new CallbackInterface({ source: tokeniser.source, tokens }), {\n      type: \"callback interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"callback interface\";\n  }\n}\n","\"use strict\";\r\n\r\nimport { Tokeniser } from \"./tokeniser.js\";\r\nimport { Enum } from \"./productions/enum.js\";\r\nimport { Includes } from \"./productions/includes.js\";\r\nimport { ExtendedAttributes } from \"./productions/extended-attributes.js\";\r\nimport { Typedef } from \"./productions/typedef.js\";\r\nimport { CallbackFunction } from \"./productions/callback.js\";\r\nimport { Interface } from \"./productions/interface.js\";\r\nimport { Mixin } from \"./productions/mixin.js\";\r\nimport { Dictionary } from \"./productions/dictionary.js\";\r\nimport { Namespace } from \"./productions/namespace.js\";\r\nimport { CallbackInterface } from \"./productions/callback-interface.js\";\r\n\r\n/**\r\n * @param {Tokeniser} tokeniser\r\n * @param {object} options\r\n * @param {boolean} [options.concrete]\r\n */\r\nfunction parseByTokens(tokeniser, options) {\r\n  const source = tokeniser.source;\r\n\r\n  function error(str) {\r\n    tokeniser.error(str);\r\n  }\r\n\r\n  function consume(...candidates) {\r\n    return tokeniser.consume(...candidates);\r\n  }\r\n\r\n  function callback() {\r\n    const callback = consume(\"callback\");\r\n    if (!callback) return;\r\n    if (tokeniser.probe(\"interface\")) {\r\n      return CallbackInterface.parse(tokeniser, callback);\r\n    }\r\n    return CallbackFunction.parse(tokeniser, callback);\r\n  }\r\n\r\n  function interface_(opts) {\r\n    const base = consume(\"interface\");\r\n    if (!base) return;\r\n    const ret = Mixin.parse(tokeniser, base, opts) ||\r\n      Interface.parse(tokeniser, base, opts) ||\r\n      error(\"Interface has no proper body\");\r\n    return ret;\r\n  }\r\n\r\n  function partial() {\r\n    const partial = consume(\"partial\");\r\n    if (!partial) return;\r\n    return Dictionary.parse(tokeniser, { partial }) ||\r\n      interface_({ partial }) ||\r\n      Namespace.parse(tokeniser, { partial }) ||\r\n      error(\"Partial doesn't apply to anything\");\r\n  }\r\n\r\n  function definition() {\r\n    return callback() ||\r\n      interface_() ||\r\n      partial() ||\r\n      Dictionary.parse(tokeniser) ||\r\n      Enum.parse(tokeniser) ||\r\n      Typedef.parse(tokeniser) ||\r\n      Includes.parse(tokeniser) ||\r\n      Namespace.parse(tokeniser);\r\n  }\r\n\r\n  function definitions() {\r\n    if (!source.length) return [];\r\n    const defs = [];\r\n    while (true) {\r\n      const ea = ExtendedAttributes.parse(tokeniser);\r\n      const def = definition();\r\n      if (!def) {\r\n        if (ea.length) error(\"Stray extended attributes\");\r\n        break;\r\n      }\r\n      def.extAttrs = ea;\r\n      defs.push(def);\r\n    }\r\n    const eof = consume(\"eof\");\r\n    if (options.concrete) {\r\n      defs.push(eof);\r\n    }\r\n    return defs;\r\n  }\r\n  const res = definitions();\r\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\r\n  return res;\r\n}\r\n\r\nexport function parse(str, options = {}) {\r\n  const tokeniser = new Tokeniser(str);\r\n  if (typeof options.sourceName !== \"undefined\") {\r\n    tokeniser.source.name = options.sourceName;\r\n  }\r\n  return parseByTokens(tokeniser, options);\r\n}\r\n","\"use strict\";\n\nfunction noop(arg) {\n  return arg;\n}\n\nconst templates = {\n  wrap: items => items.join(\"\"),\n  trivia: noop,\n  name: noop,\n  reference: noop,\n  type: noop,\n  generic: noop,\n  nameless: noop,\n  inheritance: noop,\n  definition: noop,\n  extendedAttribute: noop,\n  extendedAttributeReference: noop\n};\n\nexport function write(ast, { templates: ts = templates } = {}) {\n  ts = Object.assign({}, templates, ts);\n\n  function reference(raw, { unescaped, context }) {\n    if (!unescaped) {\n      unescaped = raw.startsWith(\"_\") ? raw.slice(1) : raw;\n    }\n    return ts.reference(raw, unescaped, context);\n  }\n\n  function token(t, wrapper = noop, ...args) {\n    if (!t) {\n      return \"\";\n    }\n    const value = wrapper(t.value, ...args);\n    return ts.wrap([ts.trivia(t.trivia), value]);\n  }\n\n  function reference_token(t, context) {\n    return token(t, reference, { context });\n  }\n\n  function name_token(t, arg) {\n    return token(t, ts.name, arg);\n  }\n\n  function type_body(it) {\n    if (it.union || it.generic) {\n      return ts.wrap([\n        token(it.tokens.base, ts.generic),\n        token(it.tokens.open),\n        ...it.subtype.map(type),\n        token(it.tokens.close)\n      ]);\n    }\n    const firstToken = it.tokens.prefix || it.tokens.base;\n    const prefix = it.tokens.prefix ? [\n      it.tokens.prefix.value,\n      ts.trivia(it.tokens.base.trivia)\n    ] : [];\n    const ref = reference(ts.wrap([\n      ...prefix,\n      it.tokens.base.value,\n      token(it.tokens.postfix)\n    ]), { unescaped: it.idlType, context: it });\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\n  }\n  function type(it) {\n    return ts.wrap([\n      extended_attributes(it.extAttrs),\n      type_body(it),\n      token(it.tokens.nullable),\n      token(it.tokens.separator)\n    ]);\n  }\n  function default_(def) {\n    if (!def) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(def.tokens.assign),\n      ...def.expression.map(t => token(t))\n    ]);\n  }\n  function argument(arg) {\n    return ts.wrap([\n      extended_attributes(arg.extAttrs),\n      token(arg.tokens.optional),\n      ts.type(type(arg.idlType)),\n      token(arg.tokens.variadic),\n      name_token(arg.tokens.name, { data: arg }),\n      default_(arg.default),\n      token(arg.tokens.separator)\n    ]);\n  }\n  function identifier(id, context) {\n    return ts.wrap([\n      reference_token(id.tokens.value, context),\n      token(id.tokens.separator)\n    ]);\n  }\n  function make_ext_at(it) {\n    const { rhsType } = it.params;\n    return ts.wrap([\n      ts.trivia(it.tokens.name.trivia),\n      ts.extendedAttribute(ts.wrap([\n        ts.extendedAttributeReference(it.name),\n        token(it.params.tokens.assign),\n        reference_token(it.params.tokens.secondaryName, it),\n        token(it.params.tokens.open),\n        ...!it.params.list ? [] :\n          it.params.list.map(\n            rhsType === \"identifier-list\" ? id => identifier(id, it) : argument\n          ),\n        token(it.params.tokens.close)\n      ])),\n      token(it.tokens.separator)\n    ]);\n  }\n  function extended_attributes(eats) {\n    if (!eats.length) return \"\";\n    return ts.wrap([\n      token(eats.tokens.open),\n      ...eats.map(make_ext_at),\n      token(eats.tokens.close)\n    ]);\n  }\n\n  function operation(it, parent) {\n    const body = it.idlType ? [\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n    ] : [];\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      it.tokens.name ? token(it.tokens.special) : token(it.tokens.special, ts.nameless, { data: it, parent }),\n      ...body,\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function attribute(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      token(it.tokens.readonly),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function constructor(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base, ts.nameless, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function inheritance(inh) {\n    if (!inh.tokens.inheritance) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(inh.tokens.colon),\n      ts.trivia(inh.tokens.inheritance.trivia),\n      ts.inheritance(reference(inh.tokens.inheritance.value, { context: inh }))\n    ]);\n  }\n\n  function container(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.callback),\n      token(it.tokens.partial),\n      token(it.tokens.base),\n      token(it.tokens.mixin),\n      name_token(it.tokens.name, { data: it }),\n      inheritance(it),\n      token(it.tokens.open),\n      iterate(it.members, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n\n  function field(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.required),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      default_(it.default),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function const_(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.assign),\n      token(it.tokens.value),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function typedef(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function includes(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      reference_token(it.tokens.target, it),\n      token(it.tokens.includes),\n      reference_token(it.tokens.mixin, it),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function callback(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.assign),\n      ts.type(type(it.idlType)),\n      token(it.tokens.open),\n      ...it.arguments.map(argument),\n      token(it.tokens.close),\n      token(it.tokens.termination),\n    ]), { data: it });\n  }\n  function enum_(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.open),\n      iterate(it.values, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function enum_value(v, parent) {\n    return ts.wrap([\n      ts.trivia(v.tokens.value.trivia),\n      ts.definition(\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\n        { data: v, parent }\n      ),\n      token(v.tokens.separator)\n    ]);\n  }\n  function iterable_like(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.readonly),\n      token(it.tokens.async),\n      token(it.tokens.base, ts.generic),\n      token(it.tokens.open),\n      ts.wrap(it.idlType.map(type)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function eof(it) {\n    return ts.trivia(it.trivia);\n  }\n\n  const table = {\n    interface: container,\n    \"interface mixin\": container,\n    namespace: container,\n    operation,\n    attribute,\n    constructor,\n    dictionary: container,\n    field,\n    const: const_,\n    typedef,\n    includes,\n    callback,\n    enum: enum_,\n    \"enum-value\": enum_value,\n    iterable: iterable_like,\n    maplike: iterable_like,\n    setlike: iterable_like,\n    \"callback interface\": container,\n    eof\n  };\n  function dispatch(it, parent) {\n    const dispatcher = table[it.type];\n    if (!dispatcher) {\n      throw new Error(`Type \"${it.type}\" is unsupported`);\n    }\n    return table[it.type](it, parent);\n  }\n  function iterate(things, parent) {\n    if (!things) return;\n    const results = things.map(thing => dispatch(thing, parent));\n    return ts.wrap(results);\n  }\n  return iterate(ast);\n}\n","\"use strict\";\n\nimport { validationError as error } from \"./error.js\";\n\nfunction getMixinMap(all, unique) {\n  const map = new Map();\n  const includes = all.filter(def => def.type === \"includes\");\n  for (const include of includes) {\n    const mixin = unique.get(include.includes);\n    if (!mixin) {\n      continue;\n    }\n    const array = map.get(include.target);\n    if (array) {\n      array.push(mixin);\n    } else {\n      map.set(include.target, [mixin]);\n    }\n  }\n  return map;\n}\n\nfunction groupDefinitions(all) {\n  const unique = new Map();\n  const duplicates = new Set();\n  const partials = new Map();\n  for (const def of all) {\n    if (def.partial) {\n      const array = partials.get(def.name);\n      if (array) {\n        array.push(def);\n      } else {\n        partials.set(def.name, [def]);\n      }\n      continue;\n    }\n    if (!def.name) {\n      continue;\n    }\n    if (!unique.has(def.name)) {\n      unique.set(def.name, def);\n    } else {\n      duplicates.add(def);\n    }\n  }\n  return {\n    all,\n    unique,\n    partials,\n    duplicates,\n    mixinMap: getMixinMap(all, unique),\n    cache: {\n      typedefIncludesDictionary: new WeakMap()\n    },\n  };\n}\n\nfunction* checkDuplicatedNames({ unique, duplicates }) {\n  for (const dup of duplicates) {\n    const { name } = dup;\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\n    yield error(dup.tokens.name, dup, message);\n  }\n}\n\nfunction* validateIterable(ast) {\n  const defs = groupDefinitions(ast);\n  for (const def of defs.all) {\n    if (def.validate) {\n      yield* def.validate(defs);\n    }\n  }\n  yield* checkDuplicatedNames(defs);\n}\n\n// Remove this once all of our support targets expose `.flat()` by default\nfunction flatten(array) {\n  if (array.flat) {\n    return array.flat();\n  }\n  return [].concat(...array);\n}\n\n/**\n * @param {*} ast AST or array of ASTs\n */\nexport function validate(ast) {\n  return [...validateIterable(flatten(ast))];\n}\n","export { parse } from \"./lib/webidl2.js\";\r\nexport { write } from \"./lib/writer.js\";\r\nexport { validate } from \"./lib/validator.js\";\r\n"],"sourceRoot":""}