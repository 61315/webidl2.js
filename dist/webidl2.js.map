{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","type","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","length","line","precedingLine","splitted","split","lastLine","subsequentTokens","subsequentText","contextualMessage","repeat","partial","input","tokens","validationError","token","index","tokenRe","decimal","integer","identifier","string","whitespace","comment","other","stringTypes","argumentNameKeywords","nonRegexTerminals","concat","punctuations","tokeniser_Tokeniser","[object Object]","idl","str","lastCharIndex","nextChar","charAt","result","test","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","includes","punctuation","startsWith","push","Error","re","lastIndex","exec","tokenise","WebIDLParseError","syntaxError","candidates","probe","super","Base","defineProperties","json","undefined","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","token_Token","tokeniser","consume","helpers_unescape","list","parser","allowDangler","listName","first","separator","items","item","error","const_value","const_data","negative","includes_Includes","target","mixin","termination","unconsume","default_Default","assign","def","expression","close","parseByTokens","DECIMAL","INT","ID","STR","primitive_type","num_type","prefix","base","postfix","Type","integer_type","float_type","type_suffix","obj","nullable","extAttrs","generic","union","idlType","subtype","filter","GenericType","typeName","ret","open","return_type","type_with_extended_attributes","keyType","keyIdlType","valueType","UnionType","typ","or","parse","single_type","ExtendedAttributes","Argument","start_position","optional","variadic","default","argument_list","ExtendedAttributeParameters","secondaryName","rhsType","ids","identifiers","hasRhs","SimpleExtendedAttribute","params","rhs","arguments","Constant","CallbackFunction","Attribute","special","noInherit","readonly","voidToken","OperationBody","Operation","regular","body","static_member","stringifier","IterableLike","secondTypeRequired","secondTypeAllowed","Inheritance","colon","Container","instance","inheritable","allowedMembers","inheritance","members","ea","mem","args","Interface","callback","Mixin","interface_","opts","Namespace","Dictionary","Field","required","Enum","values","EnumValue","Typedef","definition","tok","res","defs","definitions","noop","arg","templates","wrap","reference","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","argument","data","id","make_ext_at","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","attribute","dictionary","field","const","typedef","enum","enum-value","v","iterable","legacyiterable","maplike","setlike","callback interface","eof","things","results","thing","dispatch","checkDuplicatedNames","unique","duplicates","dup","checkInterfaceMemberDuplication","interfaces","includesMap","Map","all","include","array","set","getIncludesMap","forEachInterface","opNames","Set","getOperations","op","partials","mixins","ext","additions","forEachExtension","addition","add","existings","has","validate","groupDefinitions","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * @param {string} text\r\n */\r\nfunction lastLine(text) {\r\n  const splitted = text.split(\"\\n\");\r\n  return splitted[splitted.length - 1];\r\n}\r\n\r\n/**\r\n * @param {string} message error message\r\n * @param {\"Syntax\" | \"Validation\"} type error type\r\n */\r\nfunction error(source, position, current, message, type) {\r\n  /**\r\n   * @param {number} count\r\n   */\r\n  function sliceTokens(count) {\r\n    return count > 0 ?\r\n      source.slice(position, position + count) :\r\n      source.slice(Math.max(position + count, 0), position);\r\n  }\r\n\r\n  function tokensToText(inputs, { precedes } = {}) {\r\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\r\n    const nextToken = source[position];\r\n    if (nextToken.type === \"eof\") {\r\n      return text;\r\n    }\r\n    if (precedes) {\r\n      return text + nextToken.trivia;\r\n    }\r\n    return text.slice(nextToken.trivia.length);\r\n  }\r\n\r\n  const maxTokens = 5; // arbitrary but works well enough\r\n  const line =\r\n    source[position].type !== \"eof\" ? source[position].line :\r\n    source.length > 1 ? source[position - 1].line :\r\n    1;\r\n\r\n  const precedingLine = lastLine(\r\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\r\n  );\r\n\r\n  const subsequentTokens = sliceTokens(maxTokens);\r\n  const subsequentText = tokensToText(subsequentTokens);\r\n  const sobsequentLine = subsequentText.split(\"\\n\")[0];\r\n\r\n  const spaced = \" \".repeat(precedingLine.length) + \"^ \" + message;\r\n  const contextualMessage = precedingLine + sobsequentLine + \"\\n\" + spaced;\r\n\r\n  const contextType = type === \"Syntax\" ? \"since\" : \"inside\";\r\n  const grammaticalContext = current ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\r\n  return {\r\n    message: `${type} error at line ${line}${grammaticalContext}:\\n${contextualMessage}`,\r\n    line,\r\n    input: subsequentText,\r\n    tokens: subsequentTokens\r\n  };\r\n}\r\n\r\n/**\r\n * @param {string} message error message\r\n */\r\nexport function syntaxError(source, position, current, message) {\r\n  return error(source, position, current, message, \"Syntax\");\r\n}\r\n\r\n/**\r\n * @param {string} message error message\r\n */\r\nexport function validationError(source, token, current, message) {\r\n  return error(source, token.index, current, message, \"Validation\").message;\r\n}\r\n","import { syntaxError } from \"./error.js\";\r\n\r\n// These regular expressions use the sticky flag so they will only match at\r\n// the current location (ie. the offset of lastIndex).\r\nconst tokenRe = {\r\n  // This expression uses a lookahead assertion to catch false matches\r\n  // against integers early.\r\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\r\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\r\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\r\n  \"string\": /\"[^\"]*\"/y,\r\n  \"whitespace\": /[\\t\\n\\r ]+/y,\r\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\r\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\r\n};\r\n\r\nexport const stringTypes = [\r\n  \"ByteString\",\r\n  \"DOMString\",\r\n  \"USVString\"\r\n];\r\n\r\nexport const argumentNameKeywords = [\r\n  \"attribute\",\r\n  \"callback\",\r\n  \"const\",\r\n  \"deleter\",\r\n  \"dictionary\",\r\n  \"enum\",\r\n  \"getter\",\r\n  \"includes\",\r\n  \"inherit\",\r\n  \"interface\",\r\n  \"iterable\",\r\n  \"maplike\",\r\n  \"namespace\",\r\n  \"partial\",\r\n  \"required\",\r\n  \"setlike\",\r\n  \"setter\",\r\n  \"static\",\r\n  \"stringifier\",\r\n  \"typedef\",\r\n  \"unrestricted\"\r\n];\r\n\r\nconst nonRegexTerminals = [\r\n  \"-Infinity\",\r\n  \"FrozenArray\",\r\n  \"Infinity\",\r\n  \"NaN\",\r\n  \"Promise\",\r\n  \"boolean\",\r\n  \"byte\",\r\n  \"double\",\r\n  \"false\",\r\n  \"float\",\r\n  \"implements\",\r\n  \"legacyiterable\",\r\n  \"long\",\r\n  \"mixin\",\r\n  \"null\",\r\n  \"octet\",\r\n  \"optional\",\r\n  \"or\",\r\n  \"readonly\",\r\n  \"record\",\r\n  \"sequence\",\r\n  \"short\",\r\n  \"true\",\r\n  \"unsigned\",\r\n  \"void\"\r\n].concat(argumentNameKeywords, stringTypes);\r\n\r\nconst punctuations = [\r\n  \"(\",\r\n  \")\",\r\n  \",\",\r\n  \"...\",\r\n  \":\",\r\n  \";\",\r\n  \"<\",\r\n  \"=\",\r\n  \">\",\r\n  \"?\",\r\n  \"[\",\r\n  \"]\",\r\n  \"{\",\r\n  \"}\"\r\n];\r\n\r\n/**\r\n * @param {string} str\r\n */\r\nfunction tokenise(str) {\r\n  const tokens = [];\r\n  let lastCharIndex = 0;\r\n  let trivia = \"\";\r\n  let line = 1;\r\n  let index = 0;\r\n  while (lastCharIndex < str.length) {\r\n    const nextChar = str.charAt(lastCharIndex);\r\n    let result = -1;\r\n\r\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\r\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\r\n    } else if (nextChar === '/') {\r\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\r\n    }\r\n\r\n    if (result !== -1) {\r\n      const currentTrivia = tokens.pop().value;\r\n      line += (currentTrivia.match(/\\n/g) || []).length;\r\n      trivia += currentTrivia;\r\n      index -= 1;\r\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\r\n      result = attemptTokenMatch(\"decimal\");\r\n      if (result === -1) {\r\n        result = attemptTokenMatch(\"integer\");\r\n      }\r\n      if (result === -1) {\r\n        result = attemptTokenMatch(\"identifier\");\r\n        const token = tokens[tokens.length - 1];\r\n        if (result !== -1 && nonRegexTerminals.includes(token.value)) {\r\n          token.type = token.value;\r\n        }\r\n      }\r\n    } else if (nextChar === '\"') {\r\n      result = attemptTokenMatch(\"string\");\r\n    }\r\n\r\n    for (const punctuation of punctuations) {\r\n      if (str.startsWith(punctuation, lastCharIndex)) {\r\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\r\n        trivia = \"\";\r\n        lastCharIndex += punctuation.length;\r\n        result = lastCharIndex;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // other as the last try\r\n    if (result === -1) {\r\n      result = attemptTokenMatch(\"other\");\r\n    }\r\n    if (result === -1) {\r\n      throw new Error(\"Token stream not progressing\");\r\n    }\r\n    lastCharIndex = result;\r\n    index += 1;\r\n  }\r\n\r\n  // remaining trivia as eof\r\n  tokens.push({\r\n    type: \"eof\",\r\n    value: \"\",\r\n    trivia\r\n  });\r\n\r\n  return tokens;\r\n\r\n  /**\r\n   * @param {keyof tokenRe} type\r\n   * @param {object} [options]\r\n   * @param {boolean} [options.noFlushTrivia]\r\n   */\r\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\r\n    const re = tokenRe[type];\r\n    re.lastIndex = lastCharIndex;\r\n    const result = re.exec(str);\r\n    if (result) {\r\n      tokens.push({ type, value: result[0], trivia, line, index });\r\n      if (!noFlushTrivia) {\r\n        trivia = \"\";\r\n      }\r\n      return re.lastIndex;\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n\r\nexport class Tokeniser {\r\n  /**\r\n   * @param {string} idl\r\n   */\r\n  constructor(idl) {\r\n    this.source = tokenise(idl);\r\n    this.position = 0;\r\n  }\r\n\r\n  /**\r\n   * @param {*} current\r\n   * @param {string} message\r\n   */\r\n  error(current, message) {\r\n    throw new WebIDLParseError(syntaxError(this.source, this.position, current, message));\r\n  }\r\n\r\n  /**\r\n   * @param {string} type\r\n   */\r\n  probe(type) {\r\n    return this.source.length > this.position && this.source[this.position].type === type;\r\n  }\r\n\r\n  /**\r\n   * @param  {...string} candidates\r\n   */\r\n  consume(...candidates) {\r\n    for (const type of candidates) {\r\n      if (!this.probe(type)) continue;\r\n      const token = this.source[this.position];\r\n      this.position++;\r\n      return token;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} position\r\n   */\r\n  unconsume(position) {\r\n    this.position = position;\r\n  }\r\n}\r\n\r\nclass WebIDLParseError extends Error {\r\n  constructor({ message, line, input, tokens }) {\r\n    super(message);\r\n    this.name = \"WebIDLParseError\"; // not to be mangled\r\n    this.line = line;\r\n    this.input = input;\r\n    this.tokens = tokens;\r\n  }\r\n}\r\n","export class Base {\r\n  constructor({ source, tokens }) {\r\n    Object.defineProperties(this, {\r\n      source: { value: source },\r\n      tokens: { value: tokens }\r\n    });\r\n  }\r\n\r\n  toJSON() {\r\n    const json = { type: undefined, name: undefined };\r\n    let proto = this;\r\n    while (proto !== Object.prototype) {\r\n      const descMap = Object.getOwnPropertyDescriptors(proto);\r\n      for (const [key, value] of Object.entries(descMap)) {\r\n        if (value.enumerable || value.get) {\r\n          json[key] = this[key];\r\n        }\r\n      }\r\n      proto = Object.getPrototypeOf(proto);\r\n    }\r\n    return json;\r\n  }\r\n}\r\n","import { Base } from \"./base\";\r\n\r\nexport class Token extends Base {\r\n  /**\r\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\r\n   * @param {string} type\r\n   */\r\n  static parser(tokeniser, type) {\r\n    return () => {\r\n      const value = tokeniser.consume(type);\r\n      if (value) {\r\n        return new Token({ source: tokeniser.source, tokens: { value } });\r\n      }\r\n    };\r\n  }\r\n\r\n  get value() {\r\n    return this.tokens.value.value;\r\n  }\r\n}\r\n","/**\r\n * @param {string} identifier \r\n */\r\nexport function unescape(identifier) {\r\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\r\n}\r\n\r\n/**\r\n * Parses comma-separated list\r\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\r\n * @param {object} args\r\n * @param {Function} args.parser parser function for each item\r\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\r\n * @param {string} [args.listName] the name to be shown on error messages\r\n */\r\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\r\n  const first = parser();\r\n  if (!first) {\r\n    return [];\r\n  }\r\n  first.tokens.separator = tokeniser.consume(\",\");\r\n  const items = [first];\r\n  while (first.tokens.separator) {\r\n    const item = parser(tokeniser);\r\n    if (!item) {\r\n      if (!allowDangler) {\r\n        error(`Trailing comma in ${listName}`);\r\n      }\r\n      break;\r\n    }\r\n    item.tokens.separator = tokeniser.consume(\",\");\r\n    items.push(item);\r\n    if (!item.tokens.separator) break;\r\n  }\r\n  return items;\r\n}\r\n\r\n/**\r\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\r\n */\r\nexport function const_value(tokeniser) {\r\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\r\n}\r\n\r\n/**\r\n * @param {object} token\r\n * @param {string} token.type\r\n * @param {string} token.value\r\n */\r\nexport function const_data({ type, value }) {\r\n  switch (type) {\r\n    case \"true\":\r\n    case \"false\":\r\n      return { type: \"boolean\", value: type === \"true\" };\r\n    case \"Infinity\":\r\n    case \"-Infinity\":\r\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\r\n    case \"[\":\r\n      return { type: \"sequence\", value: [] };\r\n    case \"decimal\":\r\n    case \"integer\":\r\n        return { type: \"number\", value };\r\n    case \"string\":\r\n      return { type: \"string\", value: value.slice(1, -1) };\r\n    default:\r\n      return { type };\r\n  }\r\n}\r\n","import { Base } from \"./base\";\r\nimport { unescape } from \"./helpers\";\r\n\r\nexport class Includes extends Base {\r\n  /**\r\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\r\n   */\r\n  static parse(tokeniser) {\r\n    const target = tokeniser.consume(\"identifier\");\r\n    if (!target) {\r\n      return;\r\n    }\r\n    const tokens = { target };\r\n    tokens.includes = tokeniser.consume(\"includes\");\r\n    if (!tokens.includes) {\r\n      tokeniser.unconsume(target.index);\r\n      return;\r\n    }\r\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\r\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\r\n    return new Includes({ source: tokeniser.source, tokens });\r\n  }\r\n\r\n  get type() {\r\n    return \"includes\";\r\n  }\r\n  get target() {\r\n    return unescape(this.tokens.target.value);\r\n  }\r\n  get includes() {\r\n    return unescape(this.tokens.mixin.value);\r\n  }\r\n}\r\n","import { Base } from \"./base\";\r\nimport { const_data, const_value } from \"./helpers\";\r\n\r\nexport class Default extends Base {\r\n  /**\r\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\r\n   */\r\n  static parse(tokeniser) {\r\n    const assign = tokeniser.consume(\"=\");\r\n    if (!assign) {\r\n      return null;\r\n    }\r\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\") || tokeniser.error(\"No value for default\");\r\n    const expression = [def];\r\n    if (def.type === \"[\") {\r\n      const close = tokeniser.consume(\"]\") || error(\"Default sequence value must be empty\");\r\n      expression.push(close);\r\n    }\r\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\r\n  }\r\n\r\n  constructor({ source, tokens, expression }) {\r\n    super({ source, tokens });\r\n    Object.defineProperty(this, \"expression\", { value: expression });\r\n  }\r\n\r\n  get type() {\r\n    return const_data(this.expression[0]).type;\r\n  }\r\n  get value() {\r\n    return const_data(this.expression[0]).value;\r\n  }\r\n  get negative() {\r\n    return const_data(this.expression[0]).negative;\r\n  }\r\n}\r\n","\"use strict\";\r\n\r\nimport { argumentNameKeywords, stringTypes, Tokeniser } from \"./tokeniser.js\";\r\nimport { Base } from \"./productions/base.js\";\r\nimport { Token } from \"./productions/token.js\";\r\nimport { Includes } from \"./productions/includes.js\";\r\nimport { const_data, const_value, list, unescape } from \"./productions/helpers.js\";\r\nimport { Default } from \"./productions/default.js\";\r\n\r\n/**\r\n * @param {Tokeniser} tokeniser\r\n */\r\nfunction parseByTokens(tokeniser) {\r\n  const source = tokeniser.source;\r\n  let current = null;\r\n\r\n  const DECIMAL = \"decimal\";\r\n  const INT = \"integer\";\r\n  const ID = \"identifier\";\r\n  const STR = \"string\";\r\n\r\n  function error(str) {\r\n    tokeniser.error(current, str);\r\n  }\r\n\r\n  function probe(type) {\r\n    return tokeniser.probe(type);\r\n  }\r\n\r\n  function consume(...candidates) {\r\n    return tokeniser.consume(...candidates);\r\n  }\r\n\r\n  function unconsume(position) {\r\n    return tokeniser.unconsume(position);\r\n  }\r\n\r\n  function integer_type() {\r\n    const prefix = consume(\"unsigned\");\r\n    const base = consume(\"short\", \"long\");\r\n    if (base) {\r\n      const postfix = consume(\"long\");\r\n      return new Type({ source, tokens: { prefix, base, postfix } });\r\n    }\r\n    if (prefix) error(\"Failed to parse integer type\");\r\n  }\r\n\r\n  function float_type() {\r\n    const prefix = consume(\"unrestricted\");\r\n    const base = consume(\"float\", \"double\");\r\n    if (base) {\r\n      return new Type({ source, tokens: { prefix, base } });\r\n    }\r\n    if (prefix) error(\"Failed to parse float type\");\r\n  }\r\n\r\n  function primitive_type() {\r\n    const num_type = integer_type() || float_type();\r\n    if (num_type) return num_type;\r\n    const base = consume(\"boolean\", \"byte\", \"octet\");\r\n    if (base) {\r\n      return new Type({ source, tokens: { base } });\r\n    }\r\n  }\r\n\r\n  function type_suffix(obj) {\r\n    const nullable = consume(\"?\");\r\n    if (nullable) {\r\n      obj.tokens.nullable = nullable;\r\n    }\r\n    if (probe(\"?\")) error(\"Can't nullable more than once\");\r\n  }\r\n\r\n  class Type extends Base {\r\n    constructor({ source, tokens }) {\r\n      super({ source, tokens });\r\n      Object.defineProperty(this, \"subtype\", { value: [] });\r\n      this.extAttrs = null;\r\n    }\r\n\r\n    get generic() {\r\n      return \"\";\r\n    }\r\n    get nullable() {\r\n      return !!this.tokens.nullable;\r\n    }\r\n    get union() {\r\n      return false;\r\n    }\r\n    get idlType() {\r\n      if (this.subtype.length) {\r\n        return this.subtype;\r\n      }\r\n      // Adding prefixes/postfixes for \"unrestricted float\", etc.\r\n      const name = [\r\n        this.tokens.prefix,\r\n        this.tokens.base,\r\n        this.tokens.postfix\r\n      ].filter(t => t).map(t => t.value).join(\" \");\r\n      return unescape(name);\r\n    }\r\n  }\r\n\r\n  class GenericType extends Type {\r\n    static parse(typeName) {\r\n      const base = consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\r\n      if (!base) {\r\n        return;\r\n      }\r\n      const ret = new GenericType({ source, tokens: { base } });\r\n      ret.tokens.open = consume(\"<\") || error(`No opening bracket after ${base.type}`);\r\n      switch (base.type) {\r\n        case \"Promise\": {\r\n          if (probe(\"[\")) error(\"Promise type cannot have extended attribute\");\r\n          const subtype = return_type(typeName) || error(\"Missing Promise subtype\");\r\n          ret.subtype.push(subtype);\r\n          break;\r\n        }\r\n        case \"sequence\":\r\n        case \"FrozenArray\": {\r\n          const subtype = type_with_extended_attributes(typeName) || error(`Missing ${base.type} subtype`);\r\n          ret.subtype.push(subtype);\r\n          break;\r\n        }\r\n        case \"record\": {\r\n          if (probe(\"[\")) error(\"Record key cannot have extended attribute\");\r\n          const keyType = consume(...stringTypes) || error(`Record key must be one of: ${stringTypes.join(\", \")}`);\r\n          const keyIdlType = new Type({ source, tokens: { base: keyType }});\r\n          keyIdlType.tokens.separator = consume(\",\") || error(\"Missing comma after record key type\");\r\n          keyIdlType.type = typeName;\r\n          const valueType = type_with_extended_attributes(typeName) || error(\"Error parsing generic type record\");\r\n          ret.subtype.push(keyIdlType, valueType);\r\n          break;\r\n        }\r\n      }\r\n      if (!ret.idlType) error(`Error parsing generic type ${base.type}`);\r\n      ret.tokens.close = consume(\">\") || error(`Missing closing bracket after ${base.type}`);\r\n      return ret;\r\n    }\r\n\r\n    get generic() {\r\n      return this.tokens.base.value;\r\n    }\r\n  }\r\n\r\n  function single_type(typeName) {\r\n    let ret = GenericType.parse(typeName) || primitive_type();\r\n    if (!ret) {\r\n      const base = consume(ID, ...stringTypes);\r\n      if (!base) {\r\n        return;\r\n      }\r\n      ret = new Type({ source, tokens: { base } });\r\n      if (probe(\"<\")) error(`Unsupported generic type ${base.value}`);\r\n    }\r\n    if (ret.generic === \"Promise\" && probe(\"?\")) {\r\n      error(\"Promise type cannot be nullable\");\r\n    }\r\n    ret.type = typeName || null;\r\n    type_suffix(ret);\r\n    if (ret.nullable && ret.idlType === \"any\") error(\"Type `any` cannot be made nullable\");\r\n    return ret;\r\n  }\r\n\r\n  class UnionType extends Type {\r\n    static parse(type) {\r\n      const tokens = {};\r\n      tokens.open = consume(\"(\");\r\n      if (!tokens.open) return;\r\n      const ret = new UnionType({ source, tokens });\r\n      ret.type = type || null;\r\n      while (true) {\r\n        const typ = type_with_extended_attributes() || error(\"No type after open parenthesis or 'or' in union type\");\r\n        if (typ.idlType === \"any\") error(\"Type `any` cannot be included in a union type\");\r\n        ret.subtype.push(typ);\r\n        const or = consume(\"or\");\r\n        if (or) {\r\n          typ.tokens.separator = or;\r\n        }\r\n        else break;\r\n      }\r\n      if (ret.idlType.length < 2) {\r\n        error(\"At least two types are expected in a union type but found less\");\r\n      }\r\n      tokens.close = consume(\")\") || error(\"Unterminated union type\");\r\n      type_suffix(ret);\r\n      return ret;\r\n    }\r\n\r\n    get union() {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function type(typeName) {\r\n    return single_type(typeName) || UnionType.parse(typeName);\r\n  }\r\n\r\n  function type_with_extended_attributes(typeName) {\r\n    const extAttrs = ExtendedAttributes.parse();\r\n    const ret = type(typeName);\r\n    if (ret) ret.extAttrs = extAttrs;\r\n    return ret;\r\n  }\r\n\r\n  class Argument extends Base {\r\n    static parse() {\r\n      const start_position = tokeniser.position;\r\n      const tokens = {};\r\n      const ret = new Argument({ source, tokens });\r\n      tokens.optional = consume(\"optional\");\r\n      ret.idlType = type_with_extended_attributes(\"argument-type\");\r\n      if (!ret.idlType) {\r\n        return unconsume(start_position);\r\n      }\r\n      if (!tokens.optional) {\r\n        tokens.variadic = consume(\"...\");\r\n      }\r\n      tokens.name = consume(ID, ...argumentNameKeywords);\r\n      if (!tokens.name) {\r\n        return unconsume(start_position);\r\n      }\r\n      ret.default = tokens.optional ? Default.parse(tokeniser) : null;\r\n      return ret;\r\n    }\r\n\r\n    get optional() {\r\n      return !!this.tokens.optional;\r\n    }\r\n    get variadic() {\r\n      return !!this.tokens.variadic;\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  function argument_list() {\r\n    return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\r\n  }\r\n\r\n  function identifiers() {\r\n    const ids = list(tokeniser, { parser: Token.parser(tokeniser, ID), listName: \"identifier list\" });\r\n    if (!ids.length) {\r\n      error(\"Expected identifiers but none found\");\r\n    }\r\n    return ids;\r\n  }\r\n\r\n  class ExtendedAttributeParameters extends Base {\r\n    static parse() {\r\n      const tokens = { assign: consume(\"=\") };\r\n      const ret = new ExtendedAttributeParameters({ source, tokens });\r\n      if (tokens.assign) {\r\n        tokens.secondaryName = consume(ID, DECIMAL, INT, STR);\r\n      }\r\n      tokens.open = consume(\"(\");\r\n      if (tokens.open) {\r\n        ret.list = ret.rhsType === \"identifier-list\" ?\r\n          // [Exposed=(Window,Worker)]\r\n          identifiers() :\r\n          // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\r\n          argument_list();\r\n        tokens.close = consume(\")\") || error(\"Unexpected token in extended attribute argument list\");\r\n      } else if (ret.hasRhs && !tokens.secondaryName) {\r\n        error(\"No right hand side to extended attribute assignment\");\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    get rhsType() {\r\n      return !this.tokens.assign ? null :\r\n        !this.tokens.secondaryName ? \"identifier-list\" :\r\n        this.tokens.secondaryName.type;\r\n    }\r\n  }\r\n\r\n  class SimpleExtendedAttribute extends Base {\r\n    static parse() {\r\n      const name = consume(ID);\r\n      if (name) {\r\n        return new SimpleExtendedAttribute({\r\n          tokens: { name },\r\n          params: ExtendedAttributeParameters.parse()\r\n        });\r\n      }\r\n    }\r\n\r\n    constructor({ source, tokens, params }) {\r\n      super({ source, tokens });\r\n      Object.defineProperty(this, \"params\", { value: params });\r\n    }\r\n\r\n    get type() {\r\n      return \"extended-attribute\";\r\n    }\r\n    get name() {\r\n      return this.tokens.name.value;\r\n    }\r\n    get rhs() {\r\n      const { rhsType: type, tokens, list } = this.params;\r\n      if (!type) {\r\n        return null;\r\n      }\r\n      const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\r\n      return { type, value };\r\n    }\r\n    get arguments() {\r\n      const { rhsType, list } = this.params;\r\n      if (!list || rhsType === \"identifier-list\") {\r\n        return [];\r\n      }\r\n      return list;\r\n    }\r\n  }\r\n\r\n  // Note: we parse something simpler than the official syntax. It's all that ever\r\n  // seems to be used\r\n  class ExtendedAttributes extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      tokens.open = consume(\"[\");\r\n      if (!tokens.open) return null;\r\n      const ret = new ExtendedAttributes({ source, tokens });\r\n      ret.items = list(tokeniser, {\r\n        parser: SimpleExtendedAttribute.parse,\r\n        listName: \"extended attribute\"\r\n      });\r\n      tokens.close = consume(\"]\") || error(\"Unexpected form of extended attribute\");\r\n      if (!ret.items.length) {\r\n        error(\"Found an empty extended attribute\");\r\n      }\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  class Constant extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      tokens.base = consume(\"const\");\r\n      if (!tokens.base) {\r\n        return;\r\n      }\r\n      let idlType = primitive_type();\r\n      if (!idlType) {\r\n        const base = consume(ID) || error(\"No type for const\");\r\n        idlType = new Type({ source, tokens: { base } });\r\n      }\r\n      if (probe(\"?\")) {\r\n        error(\"Unexpected nullable constant type\");\r\n      }\r\n      idlType.type = \"const-type\";\r\n      tokens.name = consume(ID) || error(\"No name for const\");\r\n      tokens.assign = consume(\"=\") || error(\"No value assignment for const\");\r\n      tokens.value = const_value(tokeniser) || error(\"No value for const\");\r\n      tokens.termination = consume(\";\") || error(\"Unterminated const\");\r\n      const ret = new Constant({ source, tokens });\r\n      ret.idlType = idlType;\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"const\";\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n    get value() {\r\n      return const_data(this.tokens.value);\r\n    }\r\n  }\r\n\r\n  class CallbackFunction extends Base {\r\n    static parse(base) {\r\n      const tokens = { base };\r\n      const ret = new CallbackFunction({ source, tokens });\r\n      tokens.name = consume(ID) || error(\"No name for callback\");\r\n      current = ret;\r\n      tokens.assign = consume(\"=\") || error(\"No assignment in callback\");\r\n      ret.idlType = return_type() || error(\"Missing return type\");\r\n      tokens.open = consume(\"(\") || error(\"No arguments in callback\");\r\n      ret.arguments = argument_list();\r\n      tokens.close = consume(\")\") || error(\"Unterminated callback\");\r\n      tokens.termination = consume(\";\") || error(\"Unterminated callback\");\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"callback\";\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  function callback() {\r\n    const callback = consume(\"callback\");\r\n    if (!callback) return;\r\n    const tok = consume(\"interface\");\r\n    if (tok) {\r\n      return Interface.parse(tok, { callback });\r\n    }\r\n    return CallbackFunction.parse(callback);\r\n  }\r\n\r\n  class Attribute extends Base {\r\n    static parse({ special, noInherit = false, readonly = false } = {}) {\r\n      const start_position = tokeniser.position;\r\n      const tokens = { special };\r\n      const ret = new Attribute({ source, tokens });\r\n      if (!special && !noInherit) {\r\n        tokens.special = consume(\"inherit\");\r\n      }\r\n      tokens.readonly = consume(\"readonly\");\r\n      if (readonly && !tokens.readonly && probe(\"attribute\")) {\r\n        error(\"Attributes must be readonly in this context\");\r\n      }\r\n      tokens.base = consume(\"attribute\");\r\n      if (!tokens.base) {\r\n        unconsume(start_position);\r\n        return;\r\n      }\r\n      ret.idlType = type_with_extended_attributes(\"attribute-type\") || error(\"No type in attribute\");\r\n      switch (ret.idlType.generic) {\r\n        case \"sequence\":\r\n        case \"record\": error(`Attributes cannot accept ${ret.idlType.generic} types`);\r\n      }\r\n      tokens.name = consume(ID, \"required\") || error(\"No name in attribute\");\r\n      tokens.termination = consume(\";\") || error(\"Unterminated attribute\");\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"attribute\";\r\n    }\r\n    get special() {\r\n      if (!this.tokens.special) {\r\n        return \"\";\r\n      }\r\n      return this.tokens.special.value;\r\n    }\r\n    get readonly() {\r\n      return !!this.tokens.readonly;\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  function return_type(typeName) {\r\n    const typ = type(typeName || \"return-type\");\r\n    if (typ) {\r\n      return typ;\r\n    }\r\n    const voidToken = consume(\"void\");\r\n    if (voidToken) {\r\n      const ret = new Type({ source, tokens: { base: voidToken } });\r\n      ret.type = \"return-type\";\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  class OperationBody extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      const ret = new OperationBody({ source, tokens });\r\n      ret.idlType = return_type() || error(\"Missing return type\");\r\n      tokens.name = consume(ID);\r\n      tokens.open = consume(\"(\") || error(\"Invalid operation\");\r\n      ret.arguments = argument_list();\r\n      tokens.close = consume(\")\") || error(\"Unterminated operation\");\r\n      return ret;\r\n    }\r\n\r\n    get name() {\r\n      const { name } = this.tokens;\r\n      if (!name) {\r\n        return \"\";\r\n      }\r\n      return unescape(name.value);\r\n    }\r\n  }\r\n\r\n  class Operation extends Base {\r\n    static parse({ special, regular } = {}) {\r\n      const tokens = { special };\r\n      const ret = new Operation({ source, tokens });\r\n      if (special && special.value === \"stringifier\") {\r\n        tokens.termination = consume(\";\");\r\n        if (tokens.termination) {\r\n          ret.body = null;\r\n          return ret;\r\n        }\r\n      }\r\n      if (!special && !regular) {\r\n        tokens.special = consume(\"getter\", \"setter\", \"deleter\");\r\n      }\r\n      ret.body = OperationBody.parse();\r\n      tokens.termination = consume(\";\") || error(\"Unterminated attribute\");\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"operation\";\r\n    }\r\n    get name() {\r\n      return (this.body && this.body.name) || \"\";\r\n    }\r\n    get special() {\r\n      if (!this.tokens.special) {\r\n        return \"\";\r\n      }\r\n      return this.tokens.special.value;\r\n    }\r\n  }\r\n\r\n  function static_member() {\r\n    const special = consume(\"static\");\r\n    if (!special) return;\r\n    const member = Attribute.parse({ special }) ||\r\n      Operation.parse({ special }) ||\r\n      error(\"No body in static member\");\r\n    return member;\r\n  }\r\n\r\n  function stringifier() {\r\n    const special = consume(\"stringifier\");\r\n    if (!special) return;\r\n    const member = Attribute.parse({ special }) ||\r\n      Operation.parse({ special }) ||\r\n      error(\"Unterminated stringifier\");\r\n    return member;\r\n  }\r\n\r\n  class IterableLike extends Base {\r\n    static parse() {\r\n      const start_position = tokeniser.position;\r\n      const tokens = {};\r\n      const ret = new IterableLike({ source, tokens });\r\n      tokens.readonly = consume(\"readonly\");\r\n      tokens.base = tokens.readonly ?\r\n        consume(\"maplike\", \"setlike\") :\r\n        consume(\"iterable\", \"maplike\", \"setlike\");\r\n      if (!tokens.base) {\r\n        unconsume(start_position);\r\n        return;\r\n      }\r\n\r\n      const { type } = ret;\r\n      const secondTypeRequired = type === \"maplike\";\r\n      const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\r\n\r\n      tokens.open = consume(\"<\") || error(`Error parsing ${type} declaration`);\r\n      const first = type_with_extended_attributes() || error(`Error parsing ${type} declaration`);\r\n      ret.idlType = [first];\r\n      if (secondTypeAllowed) {\r\n        first.tokens.separator = consume(\",\");\r\n        if (first.tokens.separator) {\r\n          ret.idlType.push(type_with_extended_attributes());\r\n        }\r\n        else if (secondTypeRequired)\r\n          error(`Missing second type argument in ${type} declaration`);\r\n      }\r\n      tokens.close = consume(\">\") || error(`Unterminated ${type} declaration`);\r\n      tokens.termination = consume(\";\") || error(`Missing semicolon after ${type} declaration`);\r\n\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return this.tokens.base.value;\r\n    }\r\n    get readonly() {\r\n      return !!this.tokens.readonly;\r\n    }\r\n  }\r\n\r\n  class Inheritance extends Base {\r\n    static parse() {\r\n      const colon = consume(\":\");\r\n      if (!colon) {\r\n        return;\r\n      }\r\n      const name = consume(ID) || error(\"No type in inheritance\");\r\n      return new Inheritance({ source, tokens: { colon, name } });\r\n    }\r\n\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  class Container extends Base {\r\n    static parse(instance, { type, inheritable, allowedMembers }) {\r\n      const { tokens } = instance;\r\n      tokens.name = consume(ID) || error(\"No name for interface\");\r\n      current = instance;\r\n      if (inheritable) {\r\n        instance.inheritance = Inheritance.parse() || null;\r\n      }\r\n      tokens.open = consume(\"{\") || error(`Bodyless ${type}`);\r\n      instance.members = [];\r\n      while (true) {\r\n        tokens.close = consume(\"}\");\r\n        if (tokens.close) {\r\n          tokens.termination = consume(\";\") || error(`Missing semicolon after ${type}`);\r\n          return instance;\r\n        }\r\n        const ea = ExtendedAttributes.parse();\r\n        let mem;\r\n        for (const [parser, ...args] of allowedMembers) {\r\n          mem = parser(...args);\r\n          if (mem) {\r\n            break;\r\n          }\r\n        }\r\n        if (!mem) {\r\n          error(\"Unknown member\");\r\n        }\r\n        mem.extAttrs = ea;\r\n        instance.members.push(mem);\r\n      }\r\n    }\r\n\r\n    get partial() {\r\n      return !!this.tokens.partial;\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  class Interface extends Container {\r\n    static parse(base, { callback = null, partial = null } = {}) {\r\n      const tokens = { callback, partial, base };\r\n      return Container.parse(new Interface({ source, tokens }), {\r\n        type: \"interface\",\r\n        inheritable: !partial,\r\n        allowedMembers: [\r\n          [Constant.parse],\r\n          [static_member],\r\n          [stringifier],\r\n          [IterableLike.parse],\r\n          [Attribute.parse],\r\n          [Operation.parse]\r\n        ]\r\n      });\r\n    }\r\n\r\n    get type() {\r\n      if (this.tokens.callback) {\r\n        return \"callback interface\";\r\n      }\r\n      return \"interface\";\r\n    }\r\n  }\r\n\r\n  class Mixin extends Container {\r\n    static parse(base, { partial } = {}) {\r\n      const tokens = { partial, base };\r\n      tokens.mixin = consume(\"mixin\");\r\n      if (!tokens.mixin) {\r\n        return;\r\n      }\r\n      return Container.parse(new Mixin({ source, tokens }), {\r\n        type: \"interface mixin\",\r\n        allowedMembers: [\r\n          [Constant.parse],\r\n          [stringifier],\r\n          [Attribute.parse, { noInherit: true }],\r\n          [Operation.parse, { regular: true }]\r\n        ]\r\n      });\r\n    }\r\n\r\n    get type() {\r\n      return \"interface mixin\";\r\n    }\r\n  }\r\n\r\n  function interface_(opts) {\r\n    const base = consume(\"interface\");\r\n    if (!base) return;\r\n    const ret = Mixin.parse(base, opts) ||\r\n      Interface.parse(base, opts) ||\r\n      error(\"Interface has no proper body\");\r\n    return ret;\r\n  }\r\n\r\n  class Namespace extends Container {\r\n    static parse({ partial } = {}) {\r\n      const tokens = { partial };\r\n      tokens.base = consume(\"namespace\");\r\n      if (!tokens.base) {\r\n        return;\r\n      }\r\n      return Container.parse(new Namespace({ source, tokens }), {\r\n        type: \"namespace\",\r\n        allowedMembers: [\r\n          [Attribute.parse, { noInherit: true, readonly: true }],\r\n          [Operation.parse, { regular: true }]\r\n        ]\r\n      });\r\n    }\r\n\r\n    get type() {\r\n      return \"namespace\";\r\n    }\r\n  }\r\n\r\n  function partial() {\r\n    const partial = consume(\"partial\");\r\n    if (!partial) return;\r\n    return Dictionary.parse({ partial }) ||\r\n      interface_({ partial }) ||\r\n      Namespace.parse({ partial }) ||\r\n      error(\"Partial doesn't apply to anything\");\r\n  }\r\n\r\n  class Dictionary extends Container {\r\n    static parse({ partial } = {}) {\r\n      const tokens = { partial };\r\n      tokens.base = consume(\"dictionary\");\r\n      if (!tokens.base) {\r\n        return;\r\n      }\r\n      return Container.parse(new Dictionary({ source, tokens }), {\r\n        type: \"dictionary\",\r\n        inheritable: !partial,\r\n        allowedMembers: [\r\n          [Field.parse],\r\n        ]\r\n      });\r\n    }\r\n\r\n    get type() {\r\n      return \"dictionary\";\r\n    }\r\n  }\r\n\r\n  class Field extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      const ret = new Field({ source, tokens });\r\n      ret.extAttrs = ExtendedAttributes.parse();\r\n      tokens.required = consume(\"required\");\r\n      ret.idlType = type_with_extended_attributes(\"dictionary-type\") || error(\"No type for dictionary member\");\r\n      tokens.name = consume(ID) || error(\"No name for dictionary member\");\r\n      ret.default = Default.parse(tokeniser);\r\n      if (tokens.required && ret.default) error(\"Required member must not have a default\");\r\n      tokens.termination = consume(\";\") || error(\"Unterminated dictionary member\");\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"field\";\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n    get required() {\r\n      return !!this.tokens.required;\r\n    }\r\n  }\r\n\r\n  class Enum extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      tokens.base = consume(\"enum\");\r\n      if (!tokens.base) {\r\n        return;\r\n      }\r\n      tokens.name = consume(ID) || error(\"No name for enum\");\r\n      current = new Enum({ source, tokens });\r\n      tokens.open = consume(\"{\") || error(\"Bodyless enum\");\r\n      current.values = list(tokeniser, {\r\n        parser: EnumValue.parse,\r\n        allowDangler: true,\r\n        listName: \"enumeration\"\r\n      });\r\n      if (probe(STR)) {\r\n        error(\"No comma between enum values\");\r\n      }\r\n      tokens.close = consume(\"}\") || error(\"Unexpected value in enum\");\r\n      if (!current.values.length) {\r\n        error(\"No value in enum\");\r\n      }\r\n      tokens.termination = consume(\";\") || error(\"No semicolon after enum\");\r\n      return current;\r\n    }\r\n\r\n    get type() {\r\n      return \"enum\";\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  class EnumValue extends Token {\r\n    static parse() {\r\n      const value = consume(STR);\r\n      if (value) {\r\n        return new EnumValue({ source, tokens: { value } });\r\n      }\r\n    }\r\n\r\n    get type() {\r\n      return \"enum-value\";\r\n    }\r\n    get value() {\r\n      return super.value.slice(1, -1);\r\n    }\r\n  }\r\n\r\n  class Typedef extends Base {\r\n    static parse() {\r\n      const tokens = {};\r\n      const ret = new Typedef({ source, tokens });\r\n      tokens.base = consume(\"typedef\");\r\n      if (!tokens.base) {\r\n        return;\r\n      }\r\n      ret.idlType = type_with_extended_attributes(\"typedef-type\") || error(\"No type in typedef\");\r\n      tokens.name = consume(ID) || error(\"No name in typedef\");\r\n      current = ret;\r\n      tokens.termination = consume(\";\") || error(\"Unterminated typedef\");\r\n      return ret;\r\n    }\r\n\r\n    get type() {\r\n      return \"typedef\";\r\n    }\r\n    get name() {\r\n      return unescape(this.tokens.name.value);\r\n    }\r\n  }\r\n\r\n  function definition() {\r\n    return callback() ||\r\n      interface_() ||\r\n      partial() ||\r\n      Dictionary.parse() ||\r\n      Enum.parse() ||\r\n      Typedef.parse() ||\r\n      Includes.parse(tokeniser) ||\r\n      Namespace.parse();\r\n  }\r\n\r\n  function definitions() {\r\n    if (!source.length) return [];\r\n    const defs = [];\r\n    while (true) {\r\n      const ea = ExtendedAttributes.parse();\r\n      const def = definition();\r\n      if (!def) {\r\n        if (ea) error(\"Stray extended attributes\");\r\n        break;\r\n      }\r\n      def.extAttrs = ea;\r\n      defs.push(def);\r\n    }\r\n    defs.push(consume(\"eof\"));\r\n    return defs;\r\n  }\r\n  const res = definitions();\r\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\r\n  return res;\r\n}\r\n\r\nexport function parse(str) {\r\n  const tokeniser = new Tokeniser(str);\r\n  return parseByTokens(tokeniser);\r\n}\r\n","\"use strict\";\r\n\r\nfunction noop(arg) {\r\n  return arg;\r\n}\r\n\r\nconst templates = {\r\n  wrap: items => items.join(\"\"),\r\n  trivia: noop,\r\n  name: noop,\r\n  reference: noop,\r\n  type: noop,\r\n  generic: noop,\r\n  inheritance: noop,\r\n  definition: noop,\r\n  extendedAttribute: noop,\r\n  extendedAttributeReference: noop\r\n};\r\n\r\nexport function write(ast, { templates: ts = templates } = {}) {\r\n  ts = Object.assign({}, templates, ts);\r\n\r\n  function reference(raw, unescaped) {\r\n    return ts.reference(raw, unescaped || raw);\r\n  }\r\n\r\n  function token(t, wrapper = noop, ...args) {\r\n    if (!t) {\r\n      return \"\";\r\n    }\r\n    const value = wrapper(t.value, ...args);\r\n    return ts.wrap([ts.trivia(t.trivia), value]);\r\n  }\r\n\r\n  function reference_token(t, unescaped) {\r\n    return token(t, reference, unescaped);\r\n  }\r\n\r\n  function name_token(t, arg) {\r\n    return token(t, ts.name, arg);\r\n  }\r\n\r\n  function type_body(it) {\r\n    if (it.union || it.generic) {\r\n      return ts.wrap([\r\n        token(it.tokens.base, ts.generic),\r\n        token(it.tokens.open),\r\n        ...it.subtype.map(type),\r\n        token(it.tokens.close)\r\n      ]);\r\n    }\r\n    const firstToken = it.tokens.prefix || it.tokens.base;\r\n    const prefix = it.tokens.prefix ? [\r\n      it.tokens.prefix.value,\r\n      ts.trivia(it.tokens.base.trivia)\r\n    ] : [];\r\n    const ref = reference(ts.wrap([\r\n      ...prefix,\r\n      it.tokens.base.value,\r\n      token(it.tokens.postfix)\r\n    ]), it.idlType);\r\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\r\n  }\r\n  function type(it) {\r\n    return ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      type_body(it),\r\n      token(it.tokens.nullable),\r\n      token(it.tokens.separator)\r\n    ]);\r\n  }\r\n  function default_(def) {\r\n    if (!def) {\r\n      return \"\";\r\n    }\r\n    return ts.wrap([\r\n      token(def.tokens.assign),\r\n      ...def.expression.map(t => token(t))\r\n    ]);\r\n  }\r\n  function argument(arg) {\r\n    return ts.wrap([\r\n      extended_attributes(arg.extAttrs),\r\n      token(arg.tokens.optional),\r\n      ts.type(type(arg.idlType)),\r\n      token(arg.tokens.variadic),\r\n      name_token(arg.tokens.name, { data: arg }),\r\n      default_(arg.default),\r\n      token(arg.tokens.separator)\r\n    ]);\r\n  }\r\n  function identifier(id) {\r\n    return ts.wrap([\r\n      reference_token(id.tokens.value),\r\n      token(id.tokens.separator)\r\n    ]);\r\n  }\r\n  function make_ext_at(it) {\r\n    const { rhsType } = it.params;\r\n    return ts.wrap([\r\n      ts.trivia(it.tokens.name.trivia),\r\n      ts.extendedAttribute(ts.wrap([\r\n        ts.extendedAttributeReference(it.name),\r\n        token(it.params.tokens.assign),\r\n        reference_token(it.params.tokens.secondaryName),\r\n        token(it.params.tokens.open),\r\n        ...!it.params.list ? [] :\r\n          it.params.list.map(\r\n            rhsType === \"identifier-list\" ? identifier : argument\r\n          ),\r\n        token(it.params.tokens.close)\r\n      ])),\r\n      token(it.tokens.separator)\r\n    ]);\r\n  }\r\n  function extended_attributes(eats) {\r\n    if (!eats) return \"\";\r\n    return ts.wrap([\r\n      token(eats.tokens.open),\r\n      ...eats.items.map(make_ext_at),\r\n      token(eats.tokens.close)\r\n    ]);\r\n  }\r\n\r\n  function operation(it, parent) {\r\n    const body = it.body ? [\r\n      ts.type(type(it.body.idlType)),\r\n      name_token(it.body.tokens.name, { data: it, parent }),\r\n      token(it.body.tokens.open),\r\n      ts.wrap(it.body.arguments.map(argument)),\r\n      token(it.body.tokens.close),\r\n    ] : [];\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.special),\r\n      ...body,\r\n      token(it.tokens.termination)\r\n    ]), { data: it, parent });\r\n  }\r\n\r\n  function attribute(it, parent) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.special),\r\n      token(it.tokens.readonly),\r\n      token(it.tokens.base),\r\n      ts.type(type(it.idlType)),\r\n      name_token(it.tokens.name, { data: it, parent }),\r\n      token(it.tokens.termination)\r\n    ]), { data: it, parent });\r\n  }\r\n\r\n  function inheritance(inh) {\r\n    if (!inh) {\r\n      return \"\";\r\n    }\r\n    return ts.wrap([\r\n      token(inh.tokens.colon),\r\n      ts.trivia(inh.tokens.name.trivia),\r\n      ts.inheritance(reference(inh.tokens.name.value, inh.name))\r\n    ]);\r\n  }\r\n\r\n  function container(it) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.callback),\r\n      token(it.tokens.partial),\r\n      token(it.tokens.base),\r\n      token(it.tokens.mixin),\r\n      name_token(it.tokens.name, { data: it }),\r\n      inheritance(it.inheritance),\r\n      token(it.tokens.open),\r\n      iterate(it.members, it),\r\n      token(it.tokens.close),\r\n      token(it.tokens.termination)\r\n    ]), { data: it });\r\n  }\r\n\r\n  function field(it, parent) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.required),\r\n      ts.type(type(it.idlType)),\r\n      name_token(it.tokens.name, { data: it, parent }),\r\n      default_(it.default),\r\n      token(it.tokens.termination)\r\n    ]), { data: it, parent });\r\n  }\r\n  function const_(it, parent) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.base),\r\n      ts.type(type(it.idlType)),\r\n      name_token(it.tokens.name, { data: it, parent }),\r\n      token(it.tokens.assign),\r\n      token(it.tokens.value),\r\n      token(it.tokens.termination)\r\n    ]), { data: it, parent });\r\n  }\r\n  function typedef(it) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.base),\r\n      ts.type(type(it.idlType)),\r\n      name_token(it.tokens.name, { data: it }),\r\n      token(it.tokens.termination)\r\n    ]), { data: it });\r\n  }\r\n  function includes(it) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      reference_token(it.tokens.target, it.target),\r\n      token(it.tokens.includes),\r\n      reference_token(it.tokens.mixin, it.includes),\r\n      token(it.tokens.termination)\r\n    ]), { data: it });\r\n  }\r\n  function callback(it) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.base),\r\n      name_token(it.tokens.name, { data: it }),\r\n      token(it.tokens.assign),\r\n      ts.type(type(it.idlType)),\r\n      token(it.tokens.open),\r\n      ...it.arguments.map(argument),\r\n      token(it.tokens.close),\r\n      token(it.tokens.termination),\r\n    ]), { data: it });\r\n  }\r\n  function enum_(it) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.base),\r\n      name_token(it.tokens.name, { data: it }),\r\n      token(it.tokens.open),\r\n      iterate(it.values, it),\r\n      token(it.tokens.close),\r\n      token(it.tokens.termination)\r\n    ]), { data: it });\r\n  }\r\n  function enum_value(v, parent) {\r\n    return ts.wrap([\r\n      ts.trivia(v.tokens.value.trivia),\r\n      ts.definition(\r\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\r\n        { data: v, parent }\r\n      ),\r\n      token(v.tokens.separator)\r\n    ]);\r\n  }\r\n  function iterable_like(it, parent) {\r\n    return ts.definition(ts.wrap([\r\n      extended_attributes(it.extAttrs),\r\n      token(it.tokens.readonly),\r\n      token(it.tokens.base, ts.generic),\r\n      token(it.tokens.open),\r\n      ts.wrap(it.idlType.map(type)),\r\n      token(it.tokens.close),\r\n      token(it.tokens.termination)\r\n    ]), { data: it, parent });\r\n  }\r\n  function eof(it) {\r\n    return ts.trivia(it.trivia);\r\n  }\r\n\r\n  const table = {\r\n    interface: container,\r\n    \"interface mixin\": container,\r\n    namespace: container,\r\n    operation,\r\n    attribute,\r\n    dictionary: container,\r\n    field,\r\n    const: const_,\r\n    typedef,\r\n    includes,\r\n    callback,\r\n    enum: enum_,\r\n    \"enum-value\": enum_value,\r\n    iterable: iterable_like,\r\n    legacyiterable: iterable_like,\r\n    maplike: iterable_like,\r\n    setlike: iterable_like,\r\n    \"callback interface\": container,\r\n    eof\r\n  };\r\n  function dispatch(it, parent) {\r\n    const dispatcher = table[it.type];\r\n    if (!dispatcher) {\r\n      throw new Error(`Type \"${it.type}\" is unsupported`);\r\n    }\r\n    return table[it.type](it, parent);\r\n  }\r\n  function iterate(things, parent) {\r\n    if (!things) return;\r\n    const results = things.map(thing => dispatch(thing, parent));\r\n    return ts.wrap(results);\r\n  }\r\n  return iterate(ast);\r\n}\r\n","\"use strict\";\r\n\r\nimport { validationError as error } from \"./error.js\";\r\n\r\nfunction groupDefinitions(all) {\r\n  const unique = new Map();\r\n  const duplicates = new Set();\r\n  const partials = new Map();\r\n  for (const def of all) {\r\n    if (def.partial) {\r\n      const array = partials.get(def.name);\r\n      if (array) {\r\n        array.push(def);\r\n      } else {\r\n        partials.set(def.name, [def]);\r\n      }\r\n      continue;\r\n    }\r\n    if (!def.name) {\r\n      continue;\r\n    }\r\n    if (!unique.has(def.name)) {\r\n      unique.set(def.name, def);\r\n    } else {\r\n      duplicates.add(def);\r\n    }\r\n  }\r\n  return { all, unique, partials, duplicates };\r\n}\r\n\r\nfunction* checkDuplicatedNames({ unique, duplicates }) {\r\n  for (const dup of duplicates) {\r\n    const { name } = dup;\r\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\r\n    yield error(dup.source, dup.tokens.name, dup, message);\r\n  }\r\n}\r\n\r\nfunction* checkInterfaceMemberDuplication(defs) {\r\n  const interfaces = [...defs.unique.values()].filter(def => def.type === \"interface\");\r\n  const includesMap = getIncludesMap();\r\n\r\n  for (const i of interfaces) {\r\n    yield* forEachInterface(i);\r\n  }\r\n\r\n  function* forEachInterface(i) {\r\n    const opNames = new Set(getOperations(i).map(op => op.name));\r\n    const partials = defs.partials.get(i.name) || [];\r\n    const mixins = includesMap.get(i.name) || [];\r\n    for (const ext of [...partials, ...mixins]) {\r\n      const additions = getOperations(ext);\r\n      yield* forEachExtension(additions, opNames, ext, i);\r\n      for (const addition of additions) {\r\n        opNames.add(addition.name);\r\n      }\r\n    }\r\n  }\r\n\r\n  function* forEachExtension(additions, existings, ext, base) {\r\n    for (const addition of additions) {\r\n      const { name } = addition;\r\n      if (name && existings.has(name)) {\r\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\r\n        yield error(ext.source, addition.body.tokens.name, ext, message);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getOperations(i) {\r\n    return i.members\r\n      .filter(({type}) => type === \"operation\");\r\n  }\r\n\r\n  function getIncludesMap() {\r\n    const map = new Map();\r\n    const includes = defs.all.filter(def => def.type === \"includes\");\r\n    for (const include of includes) {\r\n      const array = map.get(include.target);\r\n      const mixin = defs.unique.get(include.includes);\r\n      if (!mixin) {\r\n        continue;\r\n      }\r\n      if (array) {\r\n        array.push(mixin);\r\n      } else {\r\n        map.set(include.target, [mixin]);\r\n      }\r\n    }\r\n    return map;\r\n  }\r\n}\r\n\r\nexport function validate(ast) {\r\n  const defs = groupDefinitions(ast);\r\n  return [\r\n    ...checkDuplicatedNames(defs),\r\n    ...checkInterfaceMemberDuplication(defs)\r\n  ];\r\n}\r\n","export { parse } from \"./lib/webidl2.js\";\r\nexport { write } from \"./lib/writer.js\";\r\nexport { validate } from \"./lib/validator.js\";\r\n"],"sourceRoot":""}