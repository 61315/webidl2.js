{"version":3,"sources":["webpack://WebIDL2/webpack/universalModuleDefinition","webpack://WebIDL2/webpack/bootstrap","webpack://WebIDL2/./lib/error.js","webpack://WebIDL2/./lib/tokeniser.js","webpack://WebIDL2/./lib/productions/base.js","webpack://WebIDL2/./lib/validators/helpers.js","webpack://WebIDL2/./lib/productions/type.js","webpack://WebIDL2/./lib/productions/default.js","webpack://WebIDL2/./lib/productions/array-base.js","webpack://WebIDL2/./lib/productions/extended-attributes.js","webpack://WebIDL2/./lib/productions/helpers.js","webpack://WebIDL2/./lib/productions/argument.js","webpack://WebIDL2/./lib/productions/token.js","webpack://WebIDL2/./lib/productions/operation.js","webpack://WebIDL2/./lib/productions/attribute.js","webpack://WebIDL2/./lib/productions/enum.js","webpack://WebIDL2/./lib/productions/includes.js","webpack://WebIDL2/./lib/productions/typedef.js","webpack://WebIDL2/./lib/productions/callback.js","webpack://WebIDL2/./lib/productions/container.js","webpack://WebIDL2/./lib/productions/constant.js","webpack://WebIDL2/./lib/productions/iterable.js","webpack://WebIDL2/./lib/productions/interface.js","webpack://WebIDL2/./lib/validators/interface.js","webpack://WebIDL2/./lib/productions/mixin.js","webpack://WebIDL2/./lib/productions/field.js","webpack://WebIDL2/./lib/productions/dictionary.js","webpack://WebIDL2/./lib/productions/namespace.js","webpack://WebIDL2/./lib/productions/callback-interface.js","webpack://WebIDL2/./lib/webidl2.js","webpack://WebIDL2/./lib/writer.js","webpack://WebIDL2/./lib/validator.js","webpack://WebIDL2/./index.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","error_error","source","position","current","message","kind","level","sliceTokens","count","slice","Math","max","tokensToText","inputs","precedes","text","map","trivia","join","nextToken","type","length","line","precedingLastLine","splitted","split","lastLine","subsequentTokens","subsequentText","sourceContext","repeat","contextType","context","partial","bareMessage","sourceName","input","tokens","validationError","token","options","index","tokenRe","decimal","integer","identifier","string","whitespace","comment","other","stringTypes","argumentNameKeywords","nonRegexTerminals","concat","punctuations","tokeniser_Tokeniser","[object Object]","idl","str","lastCharIndex","nextChar","charAt","result","test","attemptTokenMatch","noFlushTrivia","currentTrivia","pop","match","includes","punctuation","startsWith","push","Error","re","lastIndex","exec","tokenise","WebIDLParseError","syntaxError","candidates","probe","super","Base","defineProperties","json","undefined","inheritance","proto","descMap","getOwnPropertyDescriptors","entries","getPrototypeOf","idlTypeIncludesDictionary","idlType","defs","union","def","unique","typedefIncludesDictionary","cache","has","set","subtype","type_suffix","tokeniser","obj","nullable","consume","error","single_type","typeName","ret","base","type_Type","open","return_type","type_with_extended_attributes","keyType","keyIdlType","separator","valueType","close","generic_type","primitive_type","generic","typ","or","union_type","extAttrs","Boolean","helpers_unescape","prefix","postfix","filter","typedef","target","reference","targetToken","validate","default_Default","assign","const_value","expression","const_data","negative","ArrayBase","Array","extended_attributes_ExtendedAttributeParameters","secondaryName","list","rhsType","ids","parser","token_Token","listName","identifiers","argument_list","hasRhs","extended_attributes_SimpleExtendedAttribute","params","parse","rhs","arguments","arg","extended_attributes_ExtendedAttributes","extAttr","argument_Argument","start_position","optional","variadic","default","unconsume","operation_Operation","special","regular","termination","argument","attribute_Attribute","noInherit","readonly","allowDangler","first","items","item","num_type","integer_type","decimal_type","voidToken","stringifier","enum_EnumValue","enum_Enum","values","includes_Includes","mixin","typedef_Typedef","callback_CallbackFunction","container_Container","instance","inheritable","allowedMembers","colon","members","ea","mem","args","member","constant_Constant","unescape","iterable_IterableLike","async","secondTypeRequired","secondTypeAllowed","static_member","interface_Interface","every","opNames","Set","getOperations","op","partials","mixins","mixinMap","ext","additions","forEachExtension","addition","add","existings","checkInterfaceMemberDuplication","mixin_Mixin","field_Field","required","dictionary_Dictionary","namespace_Namespace","callback_interface_CallbackInterface","callback","parseByTokens","interface_","opts","definition","res","eof","concrete","definitions","noop","templates","wrap","extendedAttribute","extendedAttributeReference","write","ast","ts","raw","unescaped","wrapper","reference_token","name_token","type_body","it","firstToken","ref","extended_attributes","default_","data","make_ext_at","id","eats","container","inh","iterate","iterable_like","parent","table","interface","interface mixin","namespace","operation","body","attribute","dictionary","field","const","enum","enum-value","v","iterable","legacyiterable","maplike","setlike","callback interface","things","results","thing","dispatch","getMixinMap","all","Map","include","array","validateIterable","duplicates","WeakMap","groupDefinitions","dup","checkDuplicatedNames","flat","__webpack_exports__"],"mappings":"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","file":"webidl2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIDL2\"] = factory();\n\telse\n\t\troot[\"WebIDL2\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @param {string} text\n */\nfunction lastLine(text) {\n  const splitted = text.split(\"\\n\");\n  return splitted[splitted.length - 1];\n}\n\n/**\n * @typedef {object} WebIDL2ErrorOptions\n * @property {\"error\" | \"warning\"} level\n *\n * @param {string} message error message\n * @param {\"Syntax\" | \"Validation\"} kind error type\n * @param {WebIDL2ErrorOptions} [options]\n */\nfunction error(source, position, current, message, kind, { level = \"error\" } = {}) {\n  /**\n   * @param {number} count\n   */\n  function sliceTokens(count) {\n    return count > 0 ?\n      source.slice(position, position + count) :\n      source.slice(Math.max(position + count, 0), position);\n  }\n\n  function tokensToText(inputs, { precedes } = {}) {\n    const text = inputs.map(t => t.trivia + t.value).join(\"\");\n    const nextToken = source[position];\n    if (nextToken.type === \"eof\") {\n      return text;\n    }\n    if (precedes) {\n      return text + nextToken.trivia;\n    }\n    return text.slice(nextToken.trivia.length);\n  }\n\n  const maxTokens = 5; // arbitrary but works well enough\n  const line =\n    source[position].type !== \"eof\" ? source[position].line :\n    source.length > 1 ? source[position - 1].line :\n    1;\n\n  const precedingLastLine = lastLine(\n    tokensToText(sliceTokens(-maxTokens), { precedes: true })\n  );\n\n  const subsequentTokens = sliceTokens(maxTokens);\n  const subsequentText = tokensToText(subsequentTokens);\n  const subsequentFirstLine = subsequentText.split(\"\\n\")[0];\n\n  const spaced = \" \".repeat(precedingLastLine.length) + \"^\";\n  const sourceContext = precedingLastLine + subsequentFirstLine + \"\\n\" + spaced;\n\n  const contextType = kind === \"Syntax\" ? \"since\" : \"inside\";\n  const inSourceName = source.name ? ` in ${source.name}` : \"\";\n  const grammaticalContext = (current && current.name) ? `, ${contextType} \\`${current.partial ? \"partial \" : \"\"}${current.type} ${current.name}\\`` : \"\";\n  const context = `${kind} error at line ${line}${inSourceName}${grammaticalContext}:\\n${sourceContext}`;\n  return {\n    message: `${context} ${message}`,\n    bareMessage: message,\n    context,\n    line,\n    sourceName: source.name,\n    level,\n    input: subsequentText,\n    tokens: subsequentTokens\n  };\n}\n\n/**\n * @param {string} message error message\n */\nexport function syntaxError(source, position, current, message) {\n  return error(source, position, current, message, \"Syntax\");\n}\n\n/**\n * @param {string} message error message\n * @param {WebIDL2ErrorOptions} [options]\n */\nexport function validationError(source, token, current, message, options) {\n  return error(source, token.index, current, message, \"Validation\", options);\n}\n","import { syntaxError } from \"./error.js\";\n\n// These regular expressions use the sticky flag so they will only match at\n// the current location (ie. the offset of lastIndex).\nconst tokenRe = {\n  // This expression uses a lookahead assertion to catch false matches\n  // against integers early.\n  \"decimal\": /-?(?=[0-9]*\\.|[0-9]+[eE])(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][-+]?[0-9]+)?|[0-9]+[Ee][-+]?[0-9]+)/y,\n  \"integer\": /-?(0([Xx][0-9A-Fa-f]+|[0-7]*)|[1-9][0-9]*)/y,\n  \"identifier\": /[_-]?[A-Za-z][0-9A-Z_a-z-]*/y,\n  \"string\": /\"[^\"]*\"/y,\n  \"whitespace\": /[\\t\\n\\r ]+/y,\n  \"comment\": /((\\/(\\/.*|\\*([^*]|\\*[^/])*\\*\\/)[\\t\\n\\r ]*)+)/y,\n  \"other\": /[^\\t\\n\\r 0-9A-Za-z]/y\n};\n\nexport const stringTypes = [\n  \"ByteString\",\n  \"DOMString\",\n  \"USVString\"\n];\n\nexport const argumentNameKeywords = [\n  \"async\",\n  \"attribute\",\n  \"callback\",\n  \"const\",\n  \"deleter\",\n  \"dictionary\",\n  \"enum\",\n  \"getter\",\n  \"includes\",\n  \"inherit\",\n  \"interface\",\n  \"iterable\",\n  \"maplike\",\n  \"namespace\",\n  \"partial\",\n  \"required\",\n  \"setlike\",\n  \"setter\",\n  \"static\",\n  \"stringifier\",\n  \"typedef\",\n  \"unrestricted\"\n];\n\nconst nonRegexTerminals = [\n  \"-Infinity\",\n  \"FrozenArray\",\n  \"Infinity\",\n  \"NaN\",\n  \"Promise\",\n  \"async\",\n  \"boolean\",\n  \"byte\",\n  \"double\",\n  \"false\",\n  \"float\",\n  \"long\",\n  \"mixin\",\n  \"null\",\n  \"octet\",\n  \"optional\",\n  \"or\",\n  \"readonly\",\n  \"record\",\n  \"sequence\",\n  \"short\",\n  \"true\",\n  \"unsigned\",\n  \"void\"\n].concat(argumentNameKeywords, stringTypes);\n\nconst punctuations = [\n  \"(\",\n  \")\",\n  \",\",\n  \"...\",\n  \":\",\n  \";\",\n  \"<\",\n  \"=\",\n  \">\",\n  \"?\",\n  \"[\",\n  \"]\",\n  \"{\",\n  \"}\"\n];\n\n/**\n * @param {string} str\n */\nfunction tokenise(str) {\n  const tokens = [];\n  let lastCharIndex = 0;\n  let trivia = \"\";\n  let line = 1;\n  let index = 0;\n  while (lastCharIndex < str.length) {\n    const nextChar = str.charAt(lastCharIndex);\n    let result = -1;\n\n    if (/[\\t\\n\\r ]/.test(nextChar)) {\n      result = attemptTokenMatch(\"whitespace\", { noFlushTrivia: true });\n    } else if (nextChar === '/') {\n      result = attemptTokenMatch(\"comment\", { noFlushTrivia: true });\n    }\n\n    if (result !== -1) {\n      const currentTrivia = tokens.pop().value;\n      line += (currentTrivia.match(/\\n/g) || []).length;\n      trivia += currentTrivia;\n      index -= 1;\n    } else if (/[-0-9.A-Z_a-z]/.test(nextChar)) {\n      result = attemptTokenMatch(\"decimal\");\n      if (result === -1) {\n        result = attemptTokenMatch(\"integer\");\n      }\n      if (result === -1) {\n        result = attemptTokenMatch(\"identifier\");\n        const token = tokens[tokens.length - 1];\n        if (result !== -1 && nonRegexTerminals.includes(token.value)) {\n          token.type = token.value;\n        }\n      }\n    } else if (nextChar === '\"') {\n      result = attemptTokenMatch(\"string\");\n    }\n\n    for (const punctuation of punctuations) {\n      if (str.startsWith(punctuation, lastCharIndex)) {\n        tokens.push({ type: punctuation, value: punctuation, trivia, line, index });\n        trivia = \"\";\n        lastCharIndex += punctuation.length;\n        result = lastCharIndex;\n        break;\n      }\n    }\n\n    // other as the last try\n    if (result === -1) {\n      result = attemptTokenMatch(\"other\");\n    }\n    if (result === -1) {\n      throw new Error(\"Token stream not progressing\");\n    }\n    lastCharIndex = result;\n    index += 1;\n  }\n\n  // remaining trivia as eof\n  tokens.push({\n    type: \"eof\",\n    value: \"\",\n    trivia\n  });\n\n  return tokens;\n\n  /**\n   * @param {keyof tokenRe} type\n   * @param {object} [options]\n   * @param {boolean} [options.noFlushTrivia]\n   */\n  function attemptTokenMatch(type, { noFlushTrivia } = {}) {\n    const re = tokenRe[type];\n    re.lastIndex = lastCharIndex;\n    const result = re.exec(str);\n    if (result) {\n      tokens.push({ type, value: result[0], trivia, line, index });\n      if (!noFlushTrivia) {\n        trivia = \"\";\n      }\n      return re.lastIndex;\n    }\n    return -1;\n  }\n}\n\nexport class Tokeniser {\n  /**\n   * @param {string} idl\n   */\n  constructor(idl) {\n    this.source = tokenise(idl);\n    this.position = 0;\n  }\n\n  /**\n   * @param {string} message\n   */\n  error(message) {\n    throw new WebIDLParseError(syntaxError(this.source, this.position, this.current, message));\n  }\n\n  /**\n   * @param {string} type\n   */\n  probe(type) {\n    return this.source.length > this.position && this.source[this.position].type === type;\n  }\n\n  /**\n   * @param  {...string} candidates\n   */\n  consume(...candidates) {\n    for (const type of candidates) {\n      if (!this.probe(type)) continue;\n      const token = this.source[this.position];\n      this.position++;\n      return token;\n    }\n  }\n\n  /**\n   * @param {number} position\n   */\n  unconsume(position) {\n    this.position = position;\n  }\n}\n\nclass WebIDLParseError extends Error {\n  constructor({ message, bareMessage, context, line, sourceName, input, tokens }) {\n    super(message);\n\n    this.name = \"WebIDLParseError\"; // not to be mangled\n    this.bareMessage = bareMessage;\n    this.context = context;\n    this.line = line;\n    this.sourceName = sourceName;\n    this.input = input;\n    this.tokens = tokens;\n  }\n}\n","export class Base {\n  constructor({ source, tokens }) {\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n\n  toJSON() {\n    const json = { type: undefined, name: undefined, inheritance: undefined };\n    let proto = this;\n    while (proto !== Object.prototype) {\n      const descMap = Object.getOwnPropertyDescriptors(proto);\n      for (const [key, value] of Object.entries(descMap)) {\n        if (value.enumerable || value.get) {\n          json[key] = this[key];\n        }\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n    return json;\n  }\n}\n","/**\n * Yields direct references to dictionary within union.\n */\nexport function* dictionaryWithinUnion(subtypes, defs) {\n  for (const subtype of subtypes) {\n    const def = defs.unique.get(subtype.idlType);\n    if (def && def.type === \"dictionary\") {\n      yield subtype;\n    }\n  }\n}\n\n/**\n * @return the type reference that ultimately includes dictionary.\n */\nexport function idlTypeIncludesDictionary(idlType, defs) {\n  if (!idlType.union) {\n    const def = defs.unique.get(idlType.idlType);\n    if (!def) {\n      return;\n    }\n    if (def.type === \"typedef\") {\n      const { typedefIncludesDictionary} = defs.cache;\n      if (typedefIncludesDictionary.has(def)) {\n        // Note that this also halts when it met indeterminate state\n        // to prevent infinite recursion\n        return typedefIncludesDictionary.get(def);\n      }\n      defs.cache.typedefIncludesDictionary.set(def, undefined); // indeterminate state\n      const result = idlTypeIncludesDictionary(def.idlType, defs);\n      defs.cache.typedefIncludesDictionary.set(def, result);\n      if (result) {\n        return idlType;\n      }\n    }\n    if (def.type === \"dictionary\") {\n      return idlType;\n    }\n  }\n  for (const subtype of idlType.subtype) {\n    const result = idlTypeIncludesDictionary(subtype, defs);\n    if (result) {\n      if (subtype.union) {\n        return result;\n      }\n      return subtype;\n    }\n  }\n}\n\n/**\n * @return true if the idlType directly references a typedef.\n */\nexport function referencesTypedef(idlType, defs) {\n  const result = defs.unique.get(idlType.idlType);\n  return result && result.type === \"typedef\";\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes, return_type, primitive_type } from \"./helpers.js\";\nimport { stringTypes } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction generic_type(tokeniser, typeName) {\n  const base = tokeniser.consume(\"FrozenArray\", \"Promise\", \"sequence\", \"record\");\n  if (!base) {\n    return;\n  }\n  const ret = new Type({ source: tokeniser.source, tokens: { base } });\n  ret.tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`No opening bracket after ${base.type}`);\n  switch (base.type) {\n    case \"Promise\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Promise type cannot have extended attribute\");\n      const subtype = return_type(tokeniser, typeName) || tokeniser.error(\"Missing Promise subtype\");\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"sequence\":\n    case \"FrozenArray\": {\n      const subtype = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(`Missing ${base.type} subtype`);\n      ret.subtype.push(subtype);\n      break;\n    }\n    case \"record\": {\n      if (tokeniser.probe(\"[\")) tokeniser.error(\"Record key cannot have extended attribute\");\n      const keyType = tokeniser.consume(...stringTypes) || tokeniser.error(`Record key must be one of: ${stringTypes.join(\", \")}`);\n      const keyIdlType = new Type({ source: tokeniser.source, tokens: { base: keyType }});\n      keyIdlType.tokens.separator = tokeniser.consume(\",\") || tokeniser.error(\"Missing comma after record key type\");\n      keyIdlType.type = typeName;\n      const valueType = type_with_extended_attributes(tokeniser, typeName) || tokeniser.error(\"Error parsing generic type record\");\n      ret.subtype.push(keyIdlType, valueType);\n      break;\n    }\n  }\n  if (!ret.idlType) tokeniser.error(`Error parsing generic type ${base.type}`);\n  ret.tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing closing bracket after ${base.type}`);\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction type_suffix(tokeniser, obj) {\n  const nullable = tokeniser.consume(\"?\");\n  if (nullable) {\n    obj.tokens.nullable = nullable;\n  }\n  if (tokeniser.probe(\"?\")) tokeniser.error(\"Can't nullable more than once\");\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nfunction single_type(tokeniser, typeName) {\n  let ret = generic_type(tokeniser, typeName) || primitive_type(tokeniser);\n  if (!ret) {\n    const base = tokeniser.consume(\"identifier\", ...stringTypes);\n    if (!base) {\n      return;\n    }\n    ret = new Type({ source: tokeniser.source, tokens: { base } });\n    if (tokeniser.probe(\"<\")) tokeniser.error(`Unsupported generic type ${base.value}`);\n  }\n  if (ret.generic === \"Promise\" && tokeniser.probe(\"?\")) {\n    tokeniser.error(\"Promise type cannot be nullable\");\n  }\n  ret.type = typeName || null;\n  type_suffix(tokeniser, ret);\n  if (ret.nullable && ret.idlType === \"any\") tokeniser.error(\"Type `any` cannot be made nullable\");\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} type\n */\nfunction union_type(tokeniser, type) {\n  const tokens = {};\n  tokens.open = tokeniser.consume(\"(\");\n  if (!tokens.open) return;\n  const ret = new Type({ source: tokeniser.source, tokens });\n  ret.type = type || null;\n  while (true) {\n    const typ = type_with_extended_attributes(tokeniser) || tokeniser.error(\"No type after open parenthesis or 'or' in union type\");\n    if (typ.idlType === \"any\") tokeniser.error(\"Type `any` cannot be included in a union type\");\n    ret.subtype.push(typ);\n    const or = tokeniser.consume(\"or\");\n    if (or) {\n      typ.tokens.separator = or;\n    }\n    else break;\n  }\n  if (ret.idlType.length < 2) {\n    tokeniser.error(\"At least two types are expected in a union type but found less\");\n  }\n  tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated union type\");\n  type_suffix(tokeniser, ret);\n  return ret;\n}\n\nexport class Type extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} typeName\n   */\n  static parse(tokeniser, typeName) {\n    return single_type(tokeniser, typeName) || union_type(tokeniser, typeName);\n  }\n\n  constructor({ source, tokens }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"subtype\", { value: [] });\n    this.extAttrs = [];\n  }\n\n  get generic() {\n    if (this.subtype.length && this.tokens.base) {\n      return this.tokens.base.value;\n    }\n    return \"\";\n  }\n  get nullable() {\n    return Boolean(this.tokens.nullable);\n  }\n  get union() {\n    return Boolean(this.subtype.length) && !this.tokens.base;\n  }\n  get idlType() {\n    if (this.subtype.length) {\n      return this.subtype;\n    }\n    // Adding prefixes/postfixes for \"unrestricted float\", etc.\n    const name = [\n      this.tokens.prefix,\n      this.tokens.base,\n      this.tokens.postfix\n    ].filter(t => t).map(t => t.value).join(\" \");\n    return unescape(name);\n  }\n\n  *validate(defs) {\n    /*\n     * If a union is nullable, its subunions cannot include a dictionary\n     * If not, subunions may include dictionaries if each union is not nullable\n     */\n    const typedef = !this.union && defs.unique.get(this.idlType);\n    const target =\n      this.union ? this :\n      (typedef && typedef.type === \"typedef\") ? typedef.idlType :\n      undefined;\n    if (target && this.nullable) {\n      // do not allow any dictionary\n      const reference = idlTypeIncludesDictionary(target, defs);\n      if (reference) {\n        const targetToken = (this.union ? reference : this).tokens.base;\n        const message = `Nullable union cannot include a dictionary type`;\n        yield validationError(this.source, targetToken, this, message);\n      }\n    } else {\n      // allow some dictionary\n      for (const subtype of this.subtype) {\n        yield* subtype.validate(defs);\n      }\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { const_data, const_value } from \"./helpers.js\";\n\nexport class Default extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const assign = tokeniser.consume(\"=\");\n    if (!assign) {\n      return null;\n    }\n    const def = const_value(tokeniser) || tokeniser.consume(\"string\", \"null\", \"[\", \"{\") || tokeniser.error(\"No value for default\");\n    const expression = [def];\n    if (def.type === \"[\") {\n      const close = tokeniser.consume(\"]\") || tokeniser.error(\"Default sequence value must be empty\");\n      expression.push(close);\n    } else if (def.type === \"{\") {\n      const close = tokeniser.consume(\"}\") || tokeniser.error(\"Default dictionary value must be empty\");\n      expression.push(close);\n    }\n    return new Default({ source: tokeniser.source, tokens: { assign }, expression });\n  }\n\n  constructor({ source, tokens, expression }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"expression\", { value: expression });\n  }\n\n  get type() {\n    return const_data(this.expression[0]).type;\n  }\n  get value() {\n    return const_data(this.expression[0]).value;\n  }\n  get negative() {\n    return const_data(this.expression[0]).negative;\n  }\n}\n","export class ArrayBase extends Array {\n  constructor({ source, tokens }) {\n    super();\n    Object.defineProperties(this, {\n      source: { value: source },\n      tokens: { value: tokens }\n    });\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ArrayBase } from \"./array-base.js\";\nimport { list, identifiers, argument_list } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\n\nclass ExtendedAttributeParameters extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = { assign: tokeniser.consume(\"=\") };\n    const ret = new ExtendedAttributeParameters({ source: tokeniser.source, tokens });\n    if (tokens.assign) {\n      tokens.secondaryName = tokeniser.consume(\"identifier\", \"decimal\", \"integer\", \"string\");\n    }\n    tokens.open = tokeniser.consume(\"(\");\n    if (tokens.open) {\n      ret.list = ret.rhsType === \"identifier-list\" ?\n        // [Exposed=(Window,Worker)]\n        identifiers(tokeniser) :\n        // [NamedConstructor=Audio(DOMString src)] or [Constructor(DOMString str)]\n        argument_list(tokeniser);\n      tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unexpected token in extended attribute argument list\");\n    } else if (ret.hasRhs && !tokens.secondaryName) {\n      tokeniser.error(\"No right hand side to extended attribute assignment\");\n    }\n    return ret;\n  }\n\n  get rhsType() {\n    return !this.tokens.assign ? null :\n      !this.tokens.secondaryName ? \"identifier-list\" :\n        this.tokens.secondaryName.type;\n  }\n}\n\nclass SimpleExtendedAttribute extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const name = tokeniser.consume(\"identifier\");\n    if (name) {\n      return new SimpleExtendedAttribute({\n        source: tokeniser.source,\n        tokens: { name },\n        params: ExtendedAttributeParameters.parse(tokeniser)\n      });\n    }\n  }\n\n  constructor({ source, tokens, params }) {\n    super({ source, tokens });\n    Object.defineProperty(this, \"params\", { value: params });\n  }\n\n  get type() {\n    return \"extended-attribute\";\n  }\n  get name() {\n    return this.tokens.name.value;\n  }\n  get rhs() {\n    const { rhsType: type, tokens, list } = this.params;\n    if (!type) {\n      return null;\n    }\n    const value = type === \"identifier-list\" ? list : tokens.secondaryName.value;\n    return { type, value };\n  }\n  get arguments() {\n    const { rhsType, list } = this.params;\n    if (!list || rhsType === \"identifier-list\") {\n      return [];\n    }\n    return list;\n  }\n\n  *validate(defs) {\n    if (this.name === \"NoInterfaceObject\") {\n      const message = `\\`[NoInterfaceObject]\\` extended attribute is an \\\nundesirable feature that may be removed from Web IDL in the future. Refer to the \\\n[relevant upstream PR](https://github.com/heycam/webidl/pull/609) for more \\\ninformation.`;\n      yield validationError(this.source, this.tokens.name, this, message, { level: \"warning\" });\n    }\n    for (const arg of this.arguments) {\n      yield* arg.validate(defs);\n    }\n  }\n}\n\n// Note: we parse something simpler than the official syntax. It's all that ever\n// seems to be used\nexport class ExtendedAttributes extends ArrayBase {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.open = tokeniser.consume(\"[\");\n    if (!tokens.open) return new ExtendedAttributes({});\n    const ret = new ExtendedAttributes({ source: tokeniser.source, tokens });\n    ret.push(...list(tokeniser, {\n      parser: SimpleExtendedAttribute.parse,\n      listName: \"extended attribute\"\n    }));\n    tokens.close = tokeniser.consume(\"]\") || tokeniser.error(\"Unexpected closing token of extended attribute\");\n    if (!ret.length) {\n      tokeniser.error(\"Found an empty extended attribute\");\n    }\n    if (tokeniser.probe(\"[\")) {\n      tokeniser.error(\"Illegal double extended attribute lists, consider merging them\");\n    }\n    return ret;\n  }\n\n  *validate(defs) {\n    for (const extAttr of this) {\n      yield* extAttr.validate(defs);\n    }\n  }\n}\n","import { Type } from \"./type.js\";\nimport { Argument } from \"./argument.js\";\nimport { Token } from \"./token.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Operation } from \"./operation.js\";\nimport { Attribute } from \"./attribute.js\";\n\n/**\n * @param {string} identifier\n */\nexport function unescape(identifier) {\n  return identifier.startsWith('_') ? identifier.slice(1) : identifier;\n}\n\n/**\n * Parses comma-separated list\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {object} args\n * @param {Function} args.parser parser function for each item\n * @param {boolean} [args.allowDangler] whether to allow dangling comma\n * @param {string} [args.listName] the name to be shown on error messages\n */\nexport function list(tokeniser, { parser, allowDangler, listName = \"list\" }) {\n  const first = parser(tokeniser);\n  if (!first) {\n    return [];\n  }\n  first.tokens.separator = tokeniser.consume(\",\");\n  const items = [first];\n  while (first.tokens.separator) {\n    const item = parser(tokeniser);\n    if (!item) {\n      if (!allowDangler) {\n        tokeniser.error(`Trailing comma in ${listName}`);\n      }\n      break;\n    }\n    item.tokens.separator = tokeniser.consume(\",\");\n    items.push(item);\n    if (!item.tokens.separator) break;\n  }\n  return items;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function const_value(tokeniser) {\n  return tokeniser.consume(\"true\", \"false\", \"Infinity\", \"-Infinity\", \"NaN\", \"decimal\", \"integer\");\n}\n\n/**\n * @param {object} token\n * @param {string} token.type\n * @param {string} token.value\n */\nexport function const_data({ type, value }) {\n  switch (type) {\n    case \"true\":\n    case \"false\":\n      return { type: \"boolean\", value: type === \"true\" };\n    case \"Infinity\":\n    case \"-Infinity\":\n      return { type: \"Infinity\", negative: type.startsWith(\"-\") };\n    case \"[\":\n      return { type: \"sequence\", value: [] };\n    case \"{\":\n      return { type: \"dictionary\" };\n    case \"decimal\":\n    case \"integer\":\n      return { type: \"number\", value };\n    case \"string\":\n      return { type: \"string\", value: value.slice(1, -1) };\n    default:\n      return { type };\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function primitive_type(tokeniser) {\n  function integer_type() {\n    const prefix = tokeniser.consume(\"unsigned\");\n    const base = tokeniser.consume(\"short\", \"long\");\n    if (base) {\n      const postfix = tokeniser.consume(\"long\");\n      return new Type({ source, tokens: { prefix, base, postfix } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse integer type\");\n  }\n\n  function decimal_type() {\n    const prefix = tokeniser.consume(\"unrestricted\");\n    const base = tokeniser.consume(\"float\", \"double\");\n    if (base) {\n      return new Type({ source, tokens: { prefix, base } });\n    }\n    if (prefix) tokeniser.error(\"Failed to parse float type\");\n  }\n\n  const { source } = tokeniser;\n  const num_type = integer_type(tokeniser) || decimal_type(tokeniser);\n  if (num_type) return num_type;\n  const base = tokeniser.consume(\"boolean\", \"byte\", \"octet\");\n  if (base) {\n    return new Type({ source, tokens: { base } });\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function identifiers(tokeniser) {\n  const ids = list(tokeniser, { parser: Token.parser(tokeniser, \"identifier\"), listName: \"identifier list\" });\n  if (!ids.length) {\n    tokeniser.error(\"Expected identifiers but none found\");\n  }\n  return ids;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function argument_list(tokeniser) {\n  return list(tokeniser, { parser: Argument.parse, listName: \"arguments list\" });\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function type_with_extended_attributes(tokeniser, typeName) {\n  const extAttrs = ExtendedAttributes.parse(tokeniser);\n  const ret = Type.parse(tokeniser, typeName);\n  if (ret) ret.extAttrs = extAttrs;\n  return ret;\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n * @param {string} typeName\n */\nexport function return_type(tokeniser, typeName) {\n  const typ = Type.parse(tokeniser, typeName || \"return-type\");\n  if (typ) {\n    return typ;\n  }\n  const voidToken = tokeniser.consume(\"void\");\n  if (voidToken) {\n    const ret = new Type({ source: tokeniser.source, tokens: { base: voidToken } });\n    ret.type = \"return-type\";\n    return ret;\n  }\n}\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nexport function stringifier(tokeniser) {\n  const special = tokeniser.consume(\"stringifier\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"Unterminated stringifier\");\n  return member;\n}\n","import { Base } from \"./base.js\";\nimport { Default } from \"./default.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { argumentNameKeywords } from \"../tokeniser.js\";\nimport { validationError } from \"../error.js\";\nimport { idlTypeIncludesDictionary } from \"../validators/helpers.js\";\n\nexport class Argument extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new Argument({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.optional = tokeniser.consume(\"optional\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"argument-type\");\n    if (!ret.idlType) {\n      return tokeniser.unconsume(start_position);\n    }\n    if (!tokens.optional) {\n      tokens.variadic = tokeniser.consume(\"...\");\n    }\n    tokens.name = tokeniser.consume(\"identifier\", ...argumentNameKeywords);\n    if (!tokens.name) {\n      return tokeniser.unconsume(start_position);\n    }\n    ret.default = tokens.optional ? Default.parse(tokeniser) : null;\n    return ret;\n  }\n\n  get type() {\n    return \"argument\";\n  }\n  get optional() {\n    return !!this.tokens.optional;\n  }\n  get variadic() {\n    return !!this.tokens.variadic;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n    if (idlTypeIncludesDictionary(this.idlType, defs)) {\n      if (this.optional && !this.default) {\n        const message = `Optional dictionary arguments must have a default value of \\`{}\\`.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n      if (this.idlType.nullable) {\n        const message = `Dictionary arguments cannot be nullable.`;\n        yield validationError(this.source, this.tokens.name, this, message);\n      }\n    }\n  }\n}\n","import { Base } from \"./base.js\";\n\nexport class Token extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   * @param {string} type\n   */\n  static parser(tokeniser, type) {\n    return () => {\n      const value = tokeniser.consume(type);\n      if (value) {\n        return new Token({ source: tokeniser.source, tokens: { value } });\n      }\n    };\n  }\n\n  get value() {\n    return this.tokens.value.value;\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class Operation extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, regular } = {}) {\n    const tokens = { special };\n    const ret = new Operation({ source: tokeniser.source, tokens });\n    if (special && special.value === \"stringifier\") {\n      tokens.termination = tokeniser.consume(\";\");\n      if (tokens.termination) {\n        ret.arguments = [];\n        return ret;\n      }\n    }\n    if (!special && !regular) {\n      tokens.special = tokeniser.consume(\"getter\", \"setter\", \"deleter\");\n    }\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Missing return type\");\n    tokens.name = tokeniser.consume(\"identifier\", \"includes\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Invalid operation\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated operation\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated operation, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"operation\";\n  }\n  get name() {\n    const { name } = this.tokens;\n    if (!name) {\n      return \"\";\n    }\n    return unescape(name.value);\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n\n  *validate(defs) {\n    if (this.idlType) {\n      yield* this.idlType.validate(defs);\n    }\n    for (const argument of this.arguments) {\n      yield* argument.validate(defs);\n    }\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Attribute extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { special, noInherit = false, readonly = false } = {}) {\n    const start_position = tokeniser.position;\n    const tokens = { special };\n    const ret = new Attribute({ source: tokeniser.source, tokens });\n    if (!special && !noInherit) {\n      tokens.special = tokeniser.consume(\"inherit\");\n    }\n    if (ret.special === \"inherit\" && tokeniser.probe(\"readonly\")) {\n      tokeniser.error(\"Inherited attributes cannot be read-only\");\n    }\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (readonly && !tokens.readonly && tokeniser.probe(\"attribute\")) {\n      tokeniser.error(\"Attributes must be readonly in this context\");\n    }\n    tokens.base = tokeniser.consume(\"attribute\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"attribute-type\") || tokeniser.error(\"Attribute lacks a type\");\n    switch (ret.idlType.generic) {\n      case \"sequence\":\n      case \"record\": tokeniser.error(`Attributes cannot accept ${ret.idlType.generic} types`);\n    }\n    tokens.name = tokeniser.consume(\"identifier\", \"async\", \"required\") || tokeniser.error(\"Attribute lacks a name\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated attribute, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"attribute\";\n  }\n  get special() {\n    if (!this.tokens.special) {\n      return \"\";\n    }\n    return this.tokens.special.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { list, unescape } from \"./helpers.js\";\nimport { Token } from \"./token.js\";\nimport { Base } from \"./base.js\";\n\nclass EnumValue extends Token {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const value = tokeniser.consume(\"string\");\n    if (value) {\n      return new EnumValue({ source: tokeniser.source, tokens: { value } });\n    }\n  }\n\n  get type() {\n    return \"enum-value\";\n  }\n  get value() {\n    return super.value.slice(1, -1);\n  }\n}\n\nexport class Enum extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"enum\");\n    if (!tokens.base) {\n      return;\n    }\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"No name for enum\");\n    const ret = tokeniser.current = new Enum({ source: tokeniser.source, tokens });\n    tokens.open = tokeniser.consume(\"{\") || tokeniser.error(\"Bodyless enum\");\n    ret.values = list(tokeniser, {\n      parser: EnumValue.parse,\n      allowDangler: true,\n      listName: \"enumeration\"\n    });\n    if (tokeniser.probe(\"string\")) {\n      tokeniser.error(\"No comma between enum values\");\n    }\n    tokens.close = tokeniser.consume(\"}\") || tokeniser.error(\"Unexpected value in enum\");\n    if (!ret.values.length) {\n      tokeniser.error(\"No value in enum\");\n    }\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No semicolon after enum\");\n    return ret;\n  }\n\n  get type() {\n    return \"enum\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape } from \"./helpers.js\";\n\nexport class Includes extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const target = tokeniser.consume(\"identifier\");\n    if (!target) {\n      return;\n    }\n    const tokens = { target };\n    tokens.includes = tokeniser.consume(\"includes\");\n    if (!tokens.includes) {\n      tokeniser.unconsume(target.index);\n      return;\n    }\n    tokens.mixin = tokeniser.consume(\"identifier\") || tokeniser.error(\"Incomplete includes statement\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"No terminating ; for includes statement\");\n    return new Includes({ source: tokeniser.source, tokens });\n  }\n\n  get type() {\n    return \"includes\";\n  }\n  get target() {\n    return unescape(this.tokens.target.value);\n  }\n  get includes() {\n    return unescape(this.tokens.mixin.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes, unescape } from \"./helpers.js\";\n\nexport class Typedef extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Typedef({ source: tokeniser.source, tokens });\n    tokens.base = tokeniser.consume(\"typedef\");\n    if (!tokens.base) {\n      return;\n    }\n    ret.idlType = type_with_extended_attributes(tokeniser, \"typedef-type\") || tokeniser.error(\"Typedef lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Typedef lacks a name\");\n    tokeniser.current = ret;\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated typedef, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"typedef\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { return_type, argument_list, unescape } from \"./helpers.js\";\n\nexport class CallbackFunction extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base) {\n    const tokens = { base };\n    const ret = new CallbackFunction({ source: tokeniser.source, tokens });\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Callback lacks a name\");\n    tokeniser.current = ret;\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Callback lacks an assignment\");\n    ret.idlType = return_type(tokeniser) || tokeniser.error(\"Callback lacks a return type\");\n    tokens.open = tokeniser.consume(\"(\") || tokeniser.error(\"Callback lacks parentheses for arguments\");\n    ret.arguments = argument_list(tokeniser);\n    tokens.close = tokeniser.consume(\")\") || tokeniser.error(\"Unterminated callback\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated callback, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"callback\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { unescape } from \"./helpers.js\";\n\n/**\n * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n */\nfunction inheritance(tokeniser) {\n  const colon = tokeniser.consume(\":\");\n  if (!colon) {\n    return {};\n  }\n  const inheritance = tokeniser.consume(\"identifier\") || tokeniser.error(\"Inheritance lacks a type\");\n  return { colon, inheritance };\n}\n\nexport class Container extends Base {\n    /**\n     * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n     * @param {*} instance\n     * @param {*} args\n     */\n    static parse(tokeniser, instance, { type, inheritable, allowedMembers }) {\n      const { tokens } = instance;\n      tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(`Missing name in ${instance.type}`);\n      tokeniser.current = instance;\n      if (inheritable) {\n        Object.assign(tokens, inheritance(tokeniser));\n      }\n      tokens.open = tokeniser.consume(\"{\") || tokeniser.error(`Bodyless ${type}`);\n      instance.members = [];\n      while (true) {\n        tokens.close = tokeniser.consume(\"}\");\n        if (tokens.close) {\n          tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type}`);\n          return instance;\n        }\n        const ea = ExtendedAttributes.parse(tokeniser);\n        let mem;\n        for (const [parser, ...args] of allowedMembers) {\n          mem = parser(tokeniser, ...args);\n          if (mem) {\n            break;\n          }\n        }\n        if (!mem) {\n          tokeniser.error(\"Unknown member\");\n        }\n        mem.extAttrs = ea;\n        instance.members.push(mem);\n      }\n    }\n\n    get partial() {\n      return !!this.tokens.partial;\n    }\n    get name() {\n      return unescape(this.tokens.name.value);\n    }\n    get inheritance() {\n      if (!this.tokens.inheritance) {\n        return null;\n      }\n      return unescape(this.tokens.inheritance.value);\n    }\n\n    *validate(defs) {\n      for (const member of this.members) {\n        if (member.validate) {\n          yield* member.validate(defs);\n        }\n      }\n    }\n  }\n","import { Base } from \"./base.js\";\nimport { Type } from \"./type.js\";\nimport { const_data, const_value, primitive_type } from \"./helpers.js\";\n\nexport class Constant extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    tokens.base = tokeniser.consume(\"const\");\n    if (!tokens.base) {\n      return;\n    }\n    let idlType = primitive_type(tokeniser);\n    if (!idlType) {\n      const base = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a type\");\n      idlType = new Type({ source: tokeniser.source, tokens: { base } });\n    }\n    if (tokeniser.probe(\"?\")) {\n      tokeniser.error(\"Unexpected nullable constant type\");\n    }\n    idlType.type = \"const-type\";\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Const lacks a name\");\n    tokens.assign = tokeniser.consume(\"=\") || tokeniser.error(\"Const lacks value assignment\");\n    tokens.value = const_value(tokeniser) || tokeniser.error(\"Const lacks a value\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated const, expected `;`\");\n    const ret = new Constant({ source: tokeniser.source, tokens });\n    ret.idlType = idlType;\n    return ret;\n  }\n\n  get type() {\n    return \"const\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get value() {\n    return const_data(this.tokens.value);\n  }\n}\n","import { Base } from \"./base.js\";\nimport { type_with_extended_attributes } from \"./helpers.js\";\n\nexport class IterableLike extends Base {\n  /**\n   * @param {import(\"../tokeniser.js\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const start_position = tokeniser.position;\n    const tokens = {};\n    const ret = new IterableLike({ source: tokeniser.source, tokens });\n    tokens.readonly = tokeniser.consume(\"readonly\");\n    if (!tokens.readonly) {\n      tokens.async = tokeniser.consume(\"async\");\n    }\n    tokens.base =\n      tokens.readonly ? tokeniser.consume(\"maplike\", \"setlike\") :\n      tokens.async ? tokeniser.consume(\"iterable\") :\n      tokeniser.consume(\"iterable\", \"maplike\", \"setlike\");\n    if (!tokens.base) {\n      tokeniser.unconsume(start_position);\n      return;\n    }\n\n    const { type } = ret;\n    const secondTypeRequired = type === \"maplike\" || ret.async;\n    const secondTypeAllowed = secondTypeRequired || type === \"iterable\";\n\n    tokens.open = tokeniser.consume(\"<\") || tokeniser.error(`Missing less-than sign \\`<\\` in ${type} declaration`);\n    const first = type_with_extended_attributes(tokeniser) || tokeniser.error(`Missing a type argument in ${type} declaration`);\n    ret.idlType = [first];\n    if (secondTypeAllowed) {\n      first.tokens.separator = tokeniser.consume(\",\");\n      if (first.tokens.separator) {\n        ret.idlType.push(type_with_extended_attributes(tokeniser));\n      }\n      else if (secondTypeRequired) {\n        tokeniser.error(`Missing second type argument in ${type} declaration`);\n      }\n    }\n    tokens.close = tokeniser.consume(\">\") || tokeniser.error(`Missing greater-than sign \\`>\\` in ${type} declaration`);\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(`Missing semicolon after ${type} declaration`);\n\n    return ret;\n  }\n\n  get type() {\n    return this.tokens.base.value;\n  }\n  get readonly() {\n    return !!this.tokens.readonly;\n  }\n  get async() {\n    return !!this.tokens.async;\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\nimport { IterableLike } from \"./iterable.js\";\nimport { stringifier } from \"./helpers.js\";\nimport { validationError } from \"../error.js\";\nimport { checkInterfaceMemberDuplication } from \"../validators/interface.js\";\n\n/**\n * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n */\nfunction static_member(tokeniser) {\n  const special = tokeniser.consume(\"static\");\n  if (!special) return;\n  const member = Attribute.parse(tokeniser, { special }) ||\n    Operation.parse(tokeniser, { special }) ||\n    tokeniser.error(\"No body in static member\");\n  return member;\n}\n\nexport class Interface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial = null } = {}) {\n    const tokens = { partial, base };\n    return Container.parse(tokeniser, new Interface({ source: tokeniser.source, tokens }), {\n      type: \"interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [static_member],\n        [stringifier],\n        [IterableLike.parse],\n        [Attribute.parse],\n        [Operation.parse]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface\";\n  }\n\n  *validate(defs) {\n    yield* this.extAttrs.validate(defs);\n    if (\n      !this.partial &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\") &&\n      this.extAttrs.every(extAttr => extAttr.name !== \"NoInterfaceObject\")\n    ) {\n      const message = `Interfaces must have \\`[Exposed]\\` extended attribute. \\\nTo fix, add, for example, \\`[Exposed=Window]\\`. Please also consider carefully \\\nif your interface should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n\n    yield* super.validate(defs);\n    if (!this.partial) {\n      yield* checkInterfaceMemberDuplication(defs, this);\n    }\n  }\n}\n","import { validationError } from \"../error.js\";\n\nexport function* checkInterfaceMemberDuplication(defs, i) {\n  const opNames = new Set(getOperations(i).map(op => op.name));\n  const partials = defs.partials.get(i.name) || [];\n  const mixins = defs.mixinMap.get(i.name) || [];\n  for (const ext of [...partials, ...mixins]) {\n    const additions = getOperations(ext);\n    yield* forEachExtension(additions, opNames, ext, i);\n    for (const addition of additions) {\n      opNames.add(addition.name);\n    }\n  }\n\n  function* forEachExtension(additions, existings, ext, base) {\n    for (const addition of additions) {\n      const { name } = addition;\n      if (name && existings.has(name)) {\n        const message = `The operation \"${name}\" has already been defined for the base interface \"${base.name}\" either in itself or in a mixin`;\n        yield validationError(ext.source, addition.tokens.name, ext, message);\n      }\n    }\n  }\n\n  function getOperations(i) {\n    return i.members\n      .filter(({type}) => type === \"operation\");\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Constant } from \"./constant.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { stringifier } from \"./helpers.js\";\n\nexport class Mixin extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, base, { partial } = {}) {\n    const tokens = { partial, base };\n    tokens.mixin = tokeniser.consume(\"mixin\");\n    if (!tokens.mixin) {\n      return;\n    }\n    return Container.parse(tokeniser, new Mixin({ source: tokeniser.source, tokens }), {\n      type: \"interface mixin\",\n      allowedMembers: [\n        [Constant.parse],\n        [stringifier],\n        [Attribute.parse, { noInherit: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"interface mixin\";\n  }\n}\n","import { Base } from \"./base.js\";\nimport { unescape, type_with_extended_attributes } from \"./helpers.js\";\nimport { ExtendedAttributes } from \"./extended-attributes.js\";\nimport { Default } from \"./default.js\";\n\nexport class Field extends Base {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser) {\n    const tokens = {};\n    const ret = new Field({ source: tokeniser.source, tokens });\n    ret.extAttrs = ExtendedAttributes.parse(tokeniser);\n    tokens.required = tokeniser.consume(\"required\");\n    ret.idlType = type_with_extended_attributes(tokeniser, \"dictionary-type\") || tokeniser.error(\"Dictionary member lacks a type\");\n    tokens.name = tokeniser.consume(\"identifier\") || tokeniser.error(\"Dictionary member lacks a name\");\n    ret.default = Default.parse(tokeniser);\n    if (tokens.required && ret.default) tokeniser.error(\"Required member must not have a default\");\n    tokens.termination = tokeniser.consume(\";\") || tokeniser.error(\"Unterminated dictionary member, expected `;`\");\n    return ret;\n  }\n\n  get type() {\n    return \"field\";\n  }\n  get name() {\n    return unescape(this.tokens.name.value);\n  }\n  get required() {\n    return !!this.tokens.required;\n  }\n\n  *validate(defs) {\n    yield* this.idlType.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Field } from \"./field.js\";\n\nexport class Dictionary extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"dictionary\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Dictionary({ source: tokeniser.source, tokens }), {\n      type: \"dictionary\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Field.parse],\n      ]\n    });\n  }\n\n  get type() {\n    return \"dictionary\";\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Attribute } from \"./attribute.js\";\nimport { Operation } from \"./operation.js\";\nimport { validationError } from \"../error.js\";\n\nexport class Namespace extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, { partial } = {}) {\n    const tokens = { partial };\n    tokens.base = tokeniser.consume(\"namespace\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new Namespace({ source: tokeniser.source, tokens }), {\n      type: \"namespace\",\n      allowedMembers: [\n        [Attribute.parse, { noInherit: true, readonly: true }],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"namespace\";\n  }\n\n  *validate(defs) {\n    if (!this.partial && this.extAttrs.every(extAttr => extAttr.name !== \"Exposed\")) {\n      const message = `Namespaces must have [Exposed] extended attribute. \\\nTo fix, add, for example, [Exposed=Window]. Please also consider carefully \\\nif your namespace should also be exposed in a Worker scope. Refer to the \\\n[WebIDL spec section on Exposed](https://heycam.github.io/webidl/#Exposed) \\\nfor more information.`;\n      yield validationError(this.source, this.tokens.name, this, message);\n    }\n    yield* super.validate(defs);\n  }\n}\n","import { Container } from \"./container.js\";\nimport { Operation } from \"./operation.js\";\nimport { Constant } from \"./constant.js\";\n\n\nexport class CallbackInterface extends Container {\n  /**\n   * @param {import(\"../tokeniser\").Tokeniser} tokeniser\n   */\n  static parse(tokeniser, callback, { partial = null } = {}) {\n    const tokens = { callback };\n    tokens.base = tokeniser.consume(\"interface\");\n    if (!tokens.base) {\n      return;\n    }\n    return Container.parse(tokeniser, new CallbackInterface({ source: tokeniser.source, tokens }), {\n      type: \"callback interface\",\n      inheritable: !partial,\n      allowedMembers: [\n        [Constant.parse],\n        [Operation.parse, { regular: true }]\n      ]\n    });\n  }\n\n  get type() {\n    return \"callback interface\";\n  }\n}\n","\"use strict\";\n\nimport { Tokeniser } from \"./tokeniser.js\";\nimport { Enum } from \"./productions/enum.js\";\nimport { Includes } from \"./productions/includes.js\";\nimport { ExtendedAttributes } from \"./productions/extended-attributes.js\";\nimport { Typedef } from \"./productions/typedef.js\";\nimport { CallbackFunction } from \"./productions/callback.js\";\nimport { Interface } from \"./productions/interface.js\";\nimport { Mixin } from \"./productions/mixin.js\";\nimport { Dictionary } from \"./productions/dictionary.js\";\nimport { Namespace } from \"./productions/namespace.js\";\nimport { CallbackInterface } from \"./productions/callback-interface.js\";\n\n/**\n * @param {Tokeniser} tokeniser\n * @param {object} options\n * @param {boolean} [options.concrete]\n */\nfunction parseByTokens(tokeniser, options) {\n  const source = tokeniser.source;\n\n  function error(str) {\n    tokeniser.error(str);\n  }\n\n  function consume(...candidates) {\n    return tokeniser.consume(...candidates);\n  }\n\n  function callback() {\n    const callback = consume(\"callback\");\n    if (!callback) return;\n    if (tokeniser.probe(\"interface\")) {\n      return CallbackInterface.parse(tokeniser, callback);\n    }\n    return CallbackFunction.parse(tokeniser, callback);\n  }\n\n  function interface_(opts) {\n    const base = consume(\"interface\");\n    if (!base) return;\n    const ret = Mixin.parse(tokeniser, base, opts) ||\n      Interface.parse(tokeniser, base, opts) ||\n      error(\"Interface has no proper body\");\n    return ret;\n  }\n\n  function partial() {\n    const partial = consume(\"partial\");\n    if (!partial) return;\n    return Dictionary.parse(tokeniser, { partial }) ||\n      interface_({ partial }) ||\n      Namespace.parse(tokeniser, { partial }) ||\n      error(\"Partial doesn't apply to anything\");\n  }\n\n  function definition() {\n    return callback() ||\n      interface_() ||\n      partial() ||\n      Dictionary.parse(tokeniser) ||\n      Enum.parse(tokeniser) ||\n      Typedef.parse(tokeniser) ||\n      Includes.parse(tokeniser) ||\n      Namespace.parse(tokeniser);\n  }\n\n  function definitions() {\n    if (!source.length) return [];\n    const defs = [];\n    while (true) {\n      const ea = ExtendedAttributes.parse(tokeniser);\n      const def = definition();\n      if (!def) {\n        if (ea.length) error(\"Stray extended attributes\");\n        break;\n      }\n      def.extAttrs = ea;\n      defs.push(def);\n    }\n    const eof = consume(\"eof\");\n    if (options.concrete) {\n      defs.push(eof);\n    }\n    return defs;\n  }\n  const res = definitions();\n  if (tokeniser.position < source.length) error(\"Unrecognised tokens\");\n  return res;\n}\n\nexport function parse(str, options = {}) {\n  const tokeniser = new Tokeniser(str);\n  if (typeof options.sourceName !== \"undefined\") {\n    tokeniser.source.name = options.sourceName;\n  }\n  return parseByTokens(tokeniser, options);\n}\n","\"use strict\";\n\nfunction noop(arg) {\n  return arg;\n}\n\nconst templates = {\n  wrap: items => items.join(\"\"),\n  trivia: noop,\n  name: noop,\n  reference: noop,\n  type: noop,\n  generic: noop,\n  inheritance: noop,\n  definition: noop,\n  extendedAttribute: noop,\n  extendedAttributeReference: noop\n};\n\nexport function write(ast, { templates: ts = templates } = {}) {\n  ts = Object.assign({}, templates, ts);\n\n  function reference(raw, { unescaped, context }) {\n    if (!unescaped) {\n      unescaped = raw.startsWith(\"_\") ? raw.slice(1) : raw;\n    }\n    return ts.reference(raw, unescaped, context);\n  }\n\n  function token(t, wrapper = noop, ...args) {\n    if (!t) {\n      return \"\";\n    }\n    const value = wrapper(t.value, ...args);\n    return ts.wrap([ts.trivia(t.trivia), value]);\n  }\n\n  function reference_token(t, context) {\n    return token(t, reference, { context });\n  }\n\n  function name_token(t, arg) {\n    return token(t, ts.name, arg);\n  }\n\n  function type_body(it) {\n    if (it.union || it.generic) {\n      return ts.wrap([\n        token(it.tokens.base, ts.generic),\n        token(it.tokens.open),\n        ...it.subtype.map(type),\n        token(it.tokens.close)\n      ]);\n    }\n    const firstToken = it.tokens.prefix || it.tokens.base;\n    const prefix = it.tokens.prefix ? [\n      it.tokens.prefix.value,\n      ts.trivia(it.tokens.base.trivia)\n    ] : [];\n    const ref = reference(ts.wrap([\n      ...prefix,\n      it.tokens.base.value,\n      token(it.tokens.postfix)\n    ]), { unescaped: it.idlType, context: it });\n    return ts.wrap([ts.trivia(firstToken.trivia), ref]);\n  }\n  function type(it) {\n    return ts.wrap([\n      extended_attributes(it.extAttrs),\n      type_body(it),\n      token(it.tokens.nullable),\n      token(it.tokens.separator)\n    ]);\n  }\n  function default_(def) {\n    if (!def) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(def.tokens.assign),\n      ...def.expression.map(t => token(t))\n    ]);\n  }\n  function argument(arg) {\n    return ts.wrap([\n      extended_attributes(arg.extAttrs),\n      token(arg.tokens.optional),\n      ts.type(type(arg.idlType)),\n      token(arg.tokens.variadic),\n      name_token(arg.tokens.name, { data: arg }),\n      default_(arg.default),\n      token(arg.tokens.separator)\n    ]);\n  }\n  function identifier(id, context) {\n    return ts.wrap([\n      reference_token(id.tokens.value, context),\n      token(id.tokens.separator)\n    ]);\n  }\n  function make_ext_at(it) {\n    const { rhsType } = it.params;\n    return ts.wrap([\n      ts.trivia(it.tokens.name.trivia),\n      ts.extendedAttribute(ts.wrap([\n        ts.extendedAttributeReference(it.name),\n        token(it.params.tokens.assign),\n        reference_token(it.params.tokens.secondaryName, it),\n        token(it.params.tokens.open),\n        ...!it.params.list ? [] :\n          it.params.list.map(\n            rhsType === \"identifier-list\" ? id => identifier(id, it) : argument\n          ),\n        token(it.params.tokens.close)\n      ])),\n      token(it.tokens.separator)\n    ]);\n  }\n  function extended_attributes(eats) {\n    if (!eats.length) return \"\";\n    return ts.wrap([\n      token(eats.tokens.open),\n      ...eats.map(make_ext_at),\n      token(eats.tokens.close)\n    ]);\n  }\n\n  function operation(it, parent) {\n    const body = it.idlType ? [\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.open),\n      ts.wrap(it.arguments.map(argument)),\n      token(it.tokens.close),\n    ] : [];\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      ...body,\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function attribute(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.special),\n      token(it.tokens.readonly),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n\n  function inheritance(inh) {\n    if (!inh.tokens.inheritance) {\n      return \"\";\n    }\n    return ts.wrap([\n      token(inh.tokens.colon),\n      ts.trivia(inh.tokens.inheritance.trivia),\n      ts.inheritance(reference(inh.tokens.inheritance.value, { context: inh }))\n    ]);\n  }\n\n  function container(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.callback),\n      token(it.tokens.partial),\n      token(it.tokens.base),\n      token(it.tokens.mixin),\n      name_token(it.tokens.name, { data: it }),\n      inheritance(it),\n      token(it.tokens.open),\n      iterate(it.members, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n\n  function field(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.required),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      default_(it.default),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function const_(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it, parent }),\n      token(it.tokens.assign),\n      token(it.tokens.value),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function typedef(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      ts.type(type(it.idlType)),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function includes(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      reference_token(it.tokens.target, it),\n      token(it.tokens.includes),\n      reference_token(it.tokens.mixin, it),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function callback(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.assign),\n      ts.type(type(it.idlType)),\n      token(it.tokens.open),\n      ...it.arguments.map(argument),\n      token(it.tokens.close),\n      token(it.tokens.termination),\n    ]), { data: it });\n  }\n  function enum_(it) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.base),\n      name_token(it.tokens.name, { data: it }),\n      token(it.tokens.open),\n      iterate(it.values, it),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it });\n  }\n  function enum_value(v, parent) {\n    return ts.wrap([\n      ts.trivia(v.tokens.value.trivia),\n      ts.definition(\n        ts.wrap(['\"', ts.name(v.value, { data: v, parent }), '\"']),\n        { data: v, parent }\n      ),\n      token(v.tokens.separator)\n    ]);\n  }\n  function iterable_like(it, parent) {\n    return ts.definition(ts.wrap([\n      extended_attributes(it.extAttrs),\n      token(it.tokens.readonly),\n      token(it.tokens.async),\n      token(it.tokens.base, ts.generic),\n      token(it.tokens.open),\n      ts.wrap(it.idlType.map(type)),\n      token(it.tokens.close),\n      token(it.tokens.termination)\n    ]), { data: it, parent });\n  }\n  function eof(it) {\n    return ts.trivia(it.trivia);\n  }\n\n  const table = {\n    interface: container,\n    \"interface mixin\": container,\n    namespace: container,\n    operation,\n    attribute,\n    dictionary: container,\n    field,\n    const: const_,\n    typedef,\n    includes,\n    callback,\n    enum: enum_,\n    \"enum-value\": enum_value,\n    iterable: iterable_like,\n    legacyiterable: iterable_like,\n    maplike: iterable_like,\n    setlike: iterable_like,\n    \"callback interface\": container,\n    eof\n  };\n  function dispatch(it, parent) {\n    const dispatcher = table[it.type];\n    if (!dispatcher) {\n      throw new Error(`Type \"${it.type}\" is unsupported`);\n    }\n    return table[it.type](it, parent);\n  }\n  function iterate(things, parent) {\n    if (!things) return;\n    const results = things.map(thing => dispatch(thing, parent));\n    return ts.wrap(results);\n  }\n  return iterate(ast);\n}\n","\"use strict\";\n\nimport { validationError as error } from \"./error.js\";\n\nfunction getMixinMap(all, unique) {\n  const map = new Map();\n  const includes = all.filter(def => def.type === \"includes\");\n  for (const include of includes) {\n    const mixin = unique.get(include.includes);\n    if (!mixin) {\n      continue;\n    }\n    const array = map.get(include.target);\n    if (array) {\n      array.push(mixin);\n    } else {\n      map.set(include.target, [mixin]);\n    }\n  }\n  return map;\n}\n\nfunction groupDefinitions(all) {\n  const unique = new Map();\n  const duplicates = new Set();\n  const partials = new Map();\n  for (const def of all) {\n    if (def.partial) {\n      const array = partials.get(def.name);\n      if (array) {\n        array.push(def);\n      } else {\n        partials.set(def.name, [def]);\n      }\n      continue;\n    }\n    if (!def.name) {\n      continue;\n    }\n    if (!unique.has(def.name)) {\n      unique.set(def.name, def);\n    } else {\n      duplicates.add(def);\n    }\n  }\n  return {\n    all,\n    unique,\n    partials,\n    duplicates,\n    mixinMap: getMixinMap(all, unique),\n    cache: {\n      typedefIncludesDictionary: new WeakMap()\n    },\n  };\n}\n\nfunction* checkDuplicatedNames({ unique, duplicates }) {\n  for (const dup of duplicates) {\n    const { name } = dup;\n    const message = `The name \"${name}\" of type \"${unique.get(name).type}\" was already seen`;\n    yield error(dup.source, dup.tokens.name, dup, message);\n  }\n}\n\nfunction* validateIterable(ast) {\n  const defs = groupDefinitions(ast);\n  for (const def of defs.all) {\n    if (def.validate) {\n      yield* def.validate(defs);\n    }\n  }\n  yield* checkDuplicatedNames(defs);\n}\n\n// Remove this once all of our support targets expose `.flat()` by default\nfunction flatten(array) {\n  if (array.flat) {\n    return array.flat();\n  }\n  return [].concat(...array);\n}\n\n/**\n * @param {*} ast AST or array of ASTs\n */\nexport function validate(ast) {\n  return [...validateIterable(flatten(ast))];\n}\n","export { parse } from \"./lib/webidl2.js\";\nexport { write } from \"./lib/writer.js\";\nexport { validate } from \"./lib/validator.js\";\n"],"sourceRoot":""}